<?xml version="1.0" encoding="UTF-8"?>
<document signature="Hero Lab Data">
  <procedure id="ClearPwrLstGifted" scripttype="eval"><![CDATA[
	~ other variables
    var myTag as string

	~ set up available Powers
	perform hero.childfound[arcGifted].setfocus
	doneif (state.isfocus = 0)
	
	foreach thing in Power
	  myTag = "PowerDeny." & eachthing.idstring
	  perform focus.assignstr[myTag]
	  nexteach
	  
	]]></procedure>
	
  <procedure id="GiveBursterList" scripttype="eval"><![CDATA[
    ~declare variables that are used to communicate with our caller
    var clearPwrs as number
	
	~ other variables
    var myTag as string
	
	~ set up available Powers
	perform hero.childfound[arcPsionicSWADE].setfocus
	doneif (state.isfocus = 0)
    
    ~ all powers are denied if clearTags = 1
	if (clearPwrs = 1) then
	  foreach thing in Power
	    myTag = "PowerDeny." & eachthing.idstring
	    perform focus.assignstr[myTag]
	    nexteach
	  endif
	  
    perform focus.delete[PowerDeny.powArcaneProtect]
    perform focus.delete[PowerDeny.powSRABoostSelf]
    perform focus.delete[PowerDeny.powBurstSWADE]
    perform focus.delete[PowerDeny.powConfusiSWADE]
    perform focus.delete[PowerDeny.powSRADarksightSe]
    perform focus.delete[PowerDeny.powSRADeflectSelf]
    perform focus.delete[PowerDeny.powSRADetectSelf]
    perform focus.delete[PowerDeny.powEmpathySWADE]
    perform focus.delete[PowerDeny.powSRAFarsightSel]
    perform focus.delete[PowerDeny.powFearSWADE]
    perform focus.delete[PowerDeny.powSRAFlySelf]
    perform focus.delete[PowerDeny.powLightDarkSWADE]
    perform focus.delete[PowerDeny.powMindLinkSWADE]
    perform focus.delete[PowerDeny.powSRAProtectSelf]
    perform focus.delete[PowerDeny.powSRAReliefSelf]
    perform focus.delete[PowerDeny.powSRASmiteSelf]
    perform focus.delete[PowerDeny.powTelekinSWADE]
    perform focus.delete[PowerDeny.powSRAWarGiftSelf]
	]]></procedure>
	
  <procedure id="GiveCrazyList" scripttype="eval"><![CDATA[
    ~declare variables that are used to communicate with our caller
    var clearPwrs as number
	
	~ other variables
    var myTag as string
	
	~ set up available Powers
	perform hero.childfound[arcPsionicSWADE].setfocus
	doneif (state.isfocus = 0)
    
    ~ all powers are denied if clearTags = 1
	if (clearPwrs = 1) then
	  foreach thing in Power
	    myTag = "PowerDeny." & eachthing.idstring
	    perform focus.assignstr[myTag]
	    nexteach
	  endif
	  
    perform focus.delete[PowerDeny.powSRAArcProSelf]
    perform focus.delete[PowerDeny.powSRABoostSelf]
    perform focus.delete[PowerDeny.powConfusiSWADE]
    perform focus.delete[PowerDeny.powSRADarksightSe]
    perform focus.delete[PowerDeny.powSRADetectSelf]
    perform focus.delete[PowerDeny.powSRADisguiseSel]
    perform focus.delete[PowerDeny.powDivinatSWADE]
    perform focus.delete[PowerDeny.powEmpathySWADE]
    perform focus.delete[PowerDeny.powSRAEnvProSelf]
    perform focus.delete[PowerDeny.powSRAFarsightSel]
    perform focus.delete[PowerDeny.powFearSWADE]
    perform focus.delete[PowerDeny.powHealingSWADE]
    perform focus.delete[PowerDeny.powMindLinkSWADE]
    perform focus.delete[PowerDeny.powReliefSWADE]
    perform focus.delete[PowerDeny.powSRAWarGiftSelf]]]></procedure>

  <procedure id="GiveCybKnightList" scripttype="eval"><![CDATA[
    ~declare variables that are used to communicate with our caller
    var clearPwrs as number
	
	~ other variables
    var myTag as string
	
	~ set up available Powers
	perform hero.childfound[arcPsionicSWADE].setfocus
	doneif (state.isfocus = 0)
    
    ~ all powers are denied if clearTags = 1
	if (clearPwrs = 1) then
	  foreach thing in Power
	    myTag = "PowerDeny." & eachthing.idstring
	    perform focus.assignstr[myTag]
	    nexteach
	  endif
	  
    perform focus.delete[PowerDeny.powArcaneProtect]
    perform focus.delete[PowerDeny.powSRABoostSelf]
    perform focus.delete[PowerDeny.powSRADarksightSe]
    perform focus.delete[PowerDeny.powSRADetectSelf]
    perform focus.delete[PowerDeny.powEmpathySWADE]
    perform focus.delete[PowerDeny.powSRAEnvProSelf]
    perform focus.delete[PowerDeny.powSRAHealingSelf]
    perform focus.delete[PowerDeny.powObjectRdSWADE]
    perform focus.delete[PowerDeny.powSRAProtectSelf]
    perform focus.delete[PowerDeny.powReliefSWADE]
    perform focus.delete[PowerDeny.powSRASmiteSelf]
    perform focus.delete[PowerDeny.powSpeakSWADE]
    perform focus.delete[PowerDeny.powSRASpeedSelf]
    perform focus.delete[PowerDeny.powSRAWarGiftSelf]
	]]></procedure>
	
  <procedure id="GiveMindMeltList" scripttype="eval"><![CDATA[
    ~declare variables that are used to communicate with our caller
    var clearPwrs as number
	
	~ other variables
    var myTag as string
	
	~ set up available Powers
	perform hero.childfound[arcPsionicSWADE].setfocus
	doneif (state.isfocus = 0)
    
    ~ all powers are denied if clearTags = 1
	if (clearPwrs = 1) then
	  foreach thing in Power
	    myTag = "PowerDeny." & eachthing.idstring
	    perform focus.assignstr[myTag]
	    nexteach
	  endif
	  
    perform focus.delete[PowerDeny.powArcaneProtect]
    perform focus.delete[PowerDeny.powBarrierSWADE]
    perform focus.delete[PowerDeny.powBlindSWADE]
    perform focus.delete[PowerDeny.powBoltSWADE]
    perform focus.delete[PowerDeny.powTraitSWADE]
    perform focus.delete[PowerDeny.powConfusiSWADE]
    perform focus.delete[PowerDeny.powSRADamageFSelf]
    perform focus.delete[PowerDeny.powSRADarksightSe]
    perform focus.delete[PowerDeny.powSRADeflectSelf]
    perform focus.delete[PowerDeny.powDisguisSWADE]
    perform focus.delete[PowerDeny.powDivinatSWADE]
    perform focus.delete[PowerDeny.powElementSWADE]
    perform focus.delete[PowerDeny.powEmpathySWADE]
    perform focus.delete[PowerDeny.powEntangSWADE]
	perform focus.delete[PowerDeny.powSRAEnvProSelf]
    perform focus.delete[PowerDeny.powSRAFarsightSel]
    perform focus.delete[PowerDeny.powFearSWADE]
    perform focus.delete[PowerDeny.powSRAFlySelf]
    perform focus.delete[PowerDeny.powHavocSWADE]
    perform focus.delete[PowerDeny.powHealingSWADE]
    perform focus.delete[PowerDeny.powIllusionSWADE]
    perform focus.delete[PowerDeny.powSRAIntangiSelf]
    perform focus.delete[PowerDeny.powSRAInvisSelf]
    perform focus.delete[PowerDeny.powMindLinkSWADE]
    perform focus.delete[PowerDeny.powMindReadSWADE]
    perform focus.delete[PowerDeny.powMindWipeSWADE]
    perform focus.delete[PowerDeny.powObjectRdSWADE]
    perform focus.delete[PowerDeny.powSRAProtectSelf]
    perform focus.delete[PowerDeny.powPuppetSWADE]
    perform focus.delete[PowerDeny.powReliefSWADE]
    perform focus.delete[PowerDeny.powSlothSpedSWADE]
    perform focus.delete[PowerDeny.powSlumberSWADE]
    perform focus.delete[PowerDeny.powSRASmiteSelf]
    perform focus.delete[PowerDeny.powSoundSilSWADE]
    perform focus.delete[PowerDeny.powSRASpeakSelf]
    perform focus.delete[PowerDeny.powStunSWADE]
    perform focus.delete[PowerDeny.powTelekinSWADE]
    perform focus.delete[PowerDeny.powWarriorSWADE]

	]]></procedure>
	
  <procedure id="GiveLLWalkerList" scripttype="eval"><![CDATA[
    ~declare variables that are used to communicate with our caller
    var clearPwrs as number
	
	~ other variables
    var myTag as string
	
	~ set up available Powers
	perform hero.childfound[arcMagicSWADE].setfocus
	doneif (state.isfocus = 0)
    
    ~ all powers are denied if clearTags = 1
	if (clearPwrs = 1) then
	  foreach thing in Power
	    myTag = "PowerDeny." & eachthing.idstring
	    perform focus.assignstr[myTag]
	    nexteach
	  endif
	  
    perform focus.delete[PowerDeny.powArcaneProtect]
    perform focus.delete[PowerDeny.powBanishSWADE]
    perform focus.delete[PowerDeny.powBarrierSWADE]
    perform focus.delete[PowerDeny.powBlastSWADE]
    perform focus.delete[PowerDeny.powBlindSWADE]
    perform focus.delete[PowerDeny.powBoltSWADE]
    perform focus.delete[PowerDeny.powTraitSWADE]
    perform focus.delete[PowerDeny.powBurrowSWADE]
    perform focus.delete[PowerDeny.powBurstSWADE]
    perform focus.delete[PowerDeny.powDetectSWADE]
    perform focus.delete[PowerDeny.powConfusiSWADE]
    perform focus.delete[PowerDeny.powDamageFSWADE]
    perform focus.delete[PowerDeny.powDarksigSWADE]
    perform focus.delete[PowerDeny.powDeflectSWADE]
    perform focus.delete[PowerDeny.powDisguisSWADE]
    perform focus.delete[PowerDeny.powDispelSWADE]
    perform focus.delete[PowerDeny.powDrainPPSWADE]
    perform focus.delete[PowerDeny.powElementSWADE]
    perform focus.delete[PowerDeny.powEntangSWADE]
    perform focus.delete[PowerDeny.powEnvironSWADE]
    perform focus.delete[PowerDeny.powFarsightSWADE]
    perform focus.delete[PowerDeny.powFearSWADE]
    perform focus.delete[PowerDeny.powFlySWADE]
    perform focus.delete[PowerDeny.powGrowShrSWADE]
    perform focus.delete[PowerDeny.powHavocSWADE]
    perform focus.delete[PowerDeny.powHealingSWADE]
    perform focus.delete[PowerDeny.powIllusionSWADE]
    perform focus.delete[PowerDeny.powIntangiSWADE]
    perform focus.delete[PowerDeny.powInvisSWADE]
    perform focus.delete[PowerDeny.powLightDarkSWADE]
    perform focus.delete[PowerDeny.powProtection]
    perform focus.delete[PowerDeny.powPuppetSWADE]
    perform focus.delete[PowerDeny.powSlothSpedSWADE]
    perform focus.delete[PowerDeny.powSlumberSWADE]
    perform focus.delete[PowerDeny.powSmiteSWADE]
    perform focus.delete[PowerDeny.powSoundSilSWADE]
    perform focus.delete[PowerDeny.powSpeakSWADE]
    perform focus.delete[PowerDeny.powStunSWADE]
    perform focus.delete[PowerDeny.powSumAllySWADE]
    perform focus.delete[PowerDeny.powTelekinSWADE]
    perform focus.delete[PowerDeny.powTeleporSWADE]
    perform focus.delete[PowerDeny.powWallWlkSWADE]
    perform focus.delete[PowerDeny.powWarriorSWADE]
	]]></procedure>

  <procedure id="GiveMysticMirList" scripttype="eval"><![CDATA[
    ~declare variables that are used to communicate with our caller
    var clearPwrs as number
	
	~ other variables
    var myTag as string
	
	~ set up available Powers
	perform hero.childfound[arcMiracleSWADE].setfocus
	doneif (state.isfocus = 0)
    
    ~ all powers are denied if clearTags = 1
	if (clearPwrs = 1) then
	  foreach thing in Power
	    myTag = "PowerDeny." & eachthing.idstring
	    perform focus.assignstr[myTag]
	    nexteach
	  endif
	  
    perform focus.delete[PowerDeny.powArcaneProtect]
    perform focus.delete[PowerDeny.powBanishSWADE]
    perform focus.delete[PowerDeny.powBarrierSWADE]
    perform focus.delete[PowerDeny.powBeastFrSWADE]
    perform focus.delete[PowerDeny.powBlindSWADE]
    perform focus.delete[PowerDeny.powBoltSWADE]
    perform focus.delete[PowerDeny.powTraitSWADE]
    perform focus.delete[PowerDeny.powBurrowSWADE]
    perform focus.delete[PowerDeny.powBurstSWADE]
    perform focus.delete[PowerDeny.powDetectSWADE]
    perform focus.delete[PowerDeny.powConfusiSWADE]
    perform focus.delete[PowerDeny.powDarksigSWADE]
    perform focus.delete[PowerDeny.powDeflectSWADE]
    perform focus.delete[PowerDeny.powDispelSWADE]
    perform focus.delete[PowerDeny.powDivinatSWADE] 
    perform focus.delete[PowerDeny.powElementSWADE]
    perform focus.delete[PowerDeny.powEntangSWADE]
    perform focus.delete[PowerDeny.powEnvironSWADE]
    perform focus.delete[PowerDeny.powFarsightSWADE]
    perform focus.delete[PowerDeny.powFearSWADE]
    perform focus.delete[PowerDeny.powFlySWADE]
    perform focus.delete[PowerDeny.powHavocSWADE]
    perform focus.delete[PowerDeny.powHealingSWADE]
    perform focus.delete[PowerDeny.powIntangiSWADE]
    perform focus.delete[PowerDeny.powInvisSWADE]
    perform focus.delete[PowerDeny.powLightDarkSWADE]
    perform focus.delete[PowerDeny.powProtection]
    perform focus.delete[PowerDeny.powReliefSWADE] 
    perform focus.delete[PowerDeny.powSRAResurHeroic] 
    perform focus.delete[PowerDeny.powShapeSWADE] 
    perform focus.delete[PowerDeny.powSlothSpedSWADE]
    perform focus.delete[PowerDeny.powSlumberSWADE]
    perform focus.delete[PowerDeny.powSmiteSWADE]
    perform focus.delete[PowerDeny.powSoundSilSWADE]
    perform focus.delete[PowerDeny.powSpeakSWADE]
    perform focus.delete[PowerDeny.powStunSWADE]
    perform focus.delete[PowerDeny.powSumAllySWADE]
    perform focus.delete[PowerDeny.powWallWlkSWADE]
    perform focus.delete[PowerDeny.powWarriorSWADE]
	]]></procedure>

  <procedure id="GiveMysticPsiList" scripttype="eval"><![CDATA[
    ~declare variables that are used to communicate with our caller
    var clearPwrs as number
	
	~ other variables
    var myTag as string
	
	~ set up available Powers
	perform hero.childfound[arcPsionicSWADE].setfocus
	doneif (state.isfocus = 0)
    
    ~ all powers are denied if clearTags = 1
	if (clearPwrs = 1) then
	  foreach thing in Power
	    myTag = "PowerDeny." & eachthing.idstring
	    perform focus.assignstr[myTag]
	    nexteach
	  endif
	  
    perform focus.delete[PowerDeny.powEmpathySWADE]
    perform focus.delete[PowerDeny.powHealingSWADE]
    perform focus.delete[PowerDeny.powIllusionSWADE]
    perform focus.delete[PowerDeny.powMindLinkSWADE]
    perform focus.delete[PowerDeny.powMindReadSWADE]
    perform focus.delete[PowerDeny.powObjectRdSWADE]
    perform focus.delete[PowerDeny.powPuppetSWADE]
    perform focus.delete[PowerDeny.powReliefSWADE]
    perform focus.delete[PowerDeny.powSpeakSWADE]
    perform focus.delete[PowerDeny.powTelekinSWADE]

	]]></procedure>

  <procedure id="GiveKWRMirList" scripttype="eval"><![CDATA[
    ~declare variables that are used to communicate with our caller
    var clearPwrs as number
	
	~ other variables
    var myTag as string
	
	~ set up available Powers
	perform hero.childfound[arcMiracleSWADE].setfocus
	doneif (state.isfocus = 0)
    
    ~ all powers are denied if clearTags = 1
	if (clearPwrs = 1) then
	  foreach thing in Power
	    myTag = "PowerDeny." & eachthing.idstring
	    perform focus.assignstr[myTag]
	    nexteach
	  endif
	
    perform focus.delete[PowerDeny.powArcaneProtect]
    perform focus.delete[PowerDeny.powBoltSWADE]
    perform focus.delete[PowerDeny.powDamageFSWADE]
    perform focus.delete[PowerDeny.powDarksigSWADE]
    perform focus.delete[PowerDeny.powDeflectSWADE]
    perform focus.delete[PowerDeny.powProtection]
    perform focus.delete[PowerDeny.powSlothSpedSWADE]
    perform focus.delete[PowerDeny.powSmiteSWADE]
    perform focus.delete[PowerDeny.powSpeakSWADE]
    perform focus.delete[PowerDeny.powWarriorSWADE]

	]]></procedure>

  <procedure id="GiveKWRPsiList" scripttype="eval"><![CDATA[
    ~declare variables that are used to communicate with our caller
    var clearPwrs as number
	
	~ other variables
    var myTag as string
	
	~ set up available Powers
	perform hero.childfound[arcPsionicSWADE].setfocus
	doneif (state.isfocus = 0)
    
    ~ all powers are denied if clearTags = 1
	if (clearPwrs = 1) then
	  foreach thing in Power
	    myTag = "PowerDeny." & eachthing.idstring
	    perform focus.assignstr[myTag]
	    nexteach
	  endif
	
    perform focus.delete[PowerDeny.powTraitSWADE]
    perform focus.delete[PowerDeny.powDarksigSWADE]
    perform focus.delete[PowerDeny.powDetectSWADE]
    perform focus.delete[PowerDeny.powEmpathySWADE]
    perform focus.delete[PowerDeny.powMindLinkSWADE]
    perform focus.delete[PowerDeny.powMindReadSWADE]
    perform focus.delete[PowerDeny.powReliefSWADE]
    perform focus.delete[PowerDeny.powTelekinSWADE]

	]]></procedure>

  <procedure id="GiveNecromanList" scripttype="eval"><![CDATA[
    ~declare variables that are used to communicate with our caller
    var clearPwrs as number
	
	~ other variables
    var myTag as string
	
	~ set up available Powers
	perform hero.childfound[arcMagicSWADE].setfocus
	doneif (state.isfocus = 0)
    
    ~ all powers are denied if clearTags = 1
	if (clearPwrs = 1) then
	  foreach thing in Power
	    myTag = "PowerDeny." & eachthing.idstring
	    perform focus.assignstr[myTag]
	    nexteach
	  endif
	
    perform focus.delete[PowerDeny.powBanishSWADE]
    perform focus.delete[PowerDeny.powBlindSWADE]
    perform focus.delete[PowerDeny.powBoltSWADE]
    perform focus.delete[PowerDeny.powTraitSWADE]
    perform focus.delete[PowerDeny.powBurrowSWADE]
    perform focus.delete[PowerDeny.powDamageFSWADE]
    perform focus.delete[PowerDeny.powDarksigSWADE]
    perform focus.delete[PowerDeny.powDeflectSWADE]
    perform focus.delete[PowerDeny.powDispelSWADE]
    perform focus.delete[PowerDeny.powDivinatSWADE]
    perform focus.delete[PowerDeny.powDrainPPSWADE]
    perform focus.delete[PowerDeny.powEmpathySWADE]
    perform focus.delete[PowerDeny.powFearSWADE]
    perform focus.delete[PowerDeny.powHealingSWADE]
    perform focus.delete[PowerDeny.powIntangiSWADE]
    perform focus.delete[PowerDeny.powLightDarkSWADE]
    perform focus.delete[PowerDeny.powObjectRdSWADE]
    perform focus.delete[PowerDeny.powProtection]
    perform focus.delete[PowerDeny.powPuppetSWADE]
    perform focus.delete[PowerDeny.powReliefSWADE]
    perform focus.delete[PowerDeny.powResurrectSWADE]
    perform focus.delete[PowerDeny.powSlothSpedSWADE]
    perform focus.delete[PowerDeny.powSmiteSWADE]
    perform focus.delete[PowerDeny.powSpeakSWADE]
    perform focus.delete[PowerDeny.powSlumberSWADE]
    perform focus.delete[PowerDeny.powStunSWADE]
    perform focus.delete[PowerDeny.powWallWlkSWADE]
    perform focus.delete[PowerDeny.powZombieSWADE]

	]]></procedure>

  <procedure id="GiveShifterList" scripttype="eval"><![CDATA[
    ~declare variables that are used to communicate with our caller
    var clearPwrs as number
	
	~ other variables
    var myTag as string
	
	~ set up available Powers
	perform hero.childfound[arcMagicSWADE].setfocus
	doneif (state.isfocus = 0)
    
    ~ all powers are denied if clearTags = 1
	if (clearPwrs = 1) then
	  foreach thing in Power
	    myTag = "PowerDeny." & eachthing.idstring
	    perform focus.assignstr[myTag]
	    nexteach
	  endif
	
    perform focus.delete[PowerDeny.powArcaneProtect]
    perform focus.delete[PowerDeny.powBanishSWADE]
    perform focus.delete[PowerDeny.powBarrierSWADE]
    perform focus.delete[PowerDeny.powBeastFrSWADE]
    perform focus.delete[PowerDeny.powBlastSWADE]
    perform focus.delete[PowerDeny.powBoltSWADE]
    perform focus.delete[PowerDeny.powTraitSWADE]
    perform focus.delete[PowerDeny.powBurstSWADE]
    perform focus.delete[PowerDeny.powSRAConcealOnly]
    perform focus.delete[PowerDeny.powDarksigSWADE]
    perform focus.delete[PowerDeny.powDeflectSWADE]
    perform focus.delete[PowerDeny.powDisguisSWADE]
    perform focus.delete[PowerDeny.powDispelSWADE]
    perform focus.delete[PowerDeny.powDrainPPSWADE]
    perform focus.delete[PowerDeny.powEntangSWADE]
    perform focus.delete[PowerDeny.powEnvironSWADE]
    perform focus.delete[PowerDeny.powFarsightSWADE]
    perform focus.delete[PowerDeny.powFearSWADE]
    perform focus.delete[PowerDeny.powFlySWADE]
    perform focus.delete[PowerDeny.powIllusionSWADE]
    perform focus.delete[PowerDeny.powIntangiSWADE]
    perform focus.delete[PowerDeny.powInvisSWADE]
    perform focus.delete[PowerDeny.powLightDarkSWADE]
    perform focus.delete[PowerDeny.powMindLinkSWADE]
    perform focus.delete[PowerDeny.powProtection]
    perform focus.delete[PowerDeny.powPuppetSWADE]
    perform focus.delete[PowerDeny.powSlothSpedSWADE]
    perform focus.delete[PowerDeny.powSlumberSWADE]
    perform focus.delete[PowerDeny.powSmiteSWADE]
    perform focus.delete[PowerDeny.powSoundSilSWADE]
    perform focus.delete[PowerDeny.powSpeakSWADE]
    perform focus.delete[PowerDeny.powStunSWADE]
    perform focus.delete[PowerDeny.powSumAllySWADE]
    perform focus.delete[PowerDeny.powTelekinSWADE]
    perform focus.delete[PowerDeny.powTeleporSWADE]
    perform focus.delete[PowerDeny.powWarriorSWADE]

	]]></procedure>

  <procedure id="GiveHeroVampList" scripttype="eval"><![CDATA[
    ~declare variables that are used to communicate with our caller
    var clearPwrs as number
	
	~ other variables
    var myTag as string
	
	~ set up available Powers
	perform hero.childfound[arcMagicSWADE].setfocus
	doneif (state.isfocus = 0)
    
    ~ all powers are denied if clearTags = 1
	if (clearPwrs = 1) then
	  foreach thing in Power
	    myTag = "PowerDeny." & eachthing.idstring
	    perform focus.assignstr[myTag]
	    nexteach
	  endif
	
    perform focus.delete[PowerDeny.powArcaneProtect]
    perform focus.delete[PowerDeny.powBanishSWADE]
    perform focus.delete[PowerDeny.powSRABoostSelf]
    perform focus.delete[PowerDeny.powDeflectSWADE]
    perform focus.delete[PowerDeny.powSRADetectSelf]
    perform focus.delete[PowerDeny.powDivinatSWADE]
    perform focus.delete[PowerDeny.powSRAFarsightSel]
    perform focus.delete[PowerDeny.powFearSWADE]
    perform focus.delete[PowerDeny.powHealingSWADE]
    perform focus.delete[PowerDeny.powMindLinkSWADE]
    perform focus.delete[PowerDeny.powMindReadSWADE]
    perform focus.delete[PowerDeny.powMindWipeSWADE]
    perform focus.delete[PowerDeny.powPuppetSWADE]
    perform focus.delete[PowerDeny.powReliefSWADE]
    perform focus.delete[PowerDeny.powSlumberSWADE]
    perform focus.delete[PowerDeny.powSRASmiteSelf]
    perform focus.delete[PowerDeny.powSRASpeakSelf]
    perform focus.delete[PowerDeny.powSRASpeedSelf]
    perform focus.delete[PowerDeny.powSRAWallWalkSel]

	]]></procedure>

  <procedure id="GiveWereMagList" scripttype="eval"><![CDATA[
    ~declare variables that are used to communicate with our caller
    var clearPwrs as number
	
	~ other variables
    var myTag as string
	
	~ set up available Powers
	perform hero.childfound[arcMagicSWADE].setfocus
	doneif (state.isfocus = 0)
    
    ~ all powers are denied if clearTags = 1
	if (clearPwrs = 1) then
	  foreach thing in Power
	    myTag = "PowerDeny." & eachthing.idstring
	    perform focus.assignstr[myTag]
	    nexteach
	  endif
	
    perform focus.delete[PowerDeny.powTraitSWADE]
    perform focus.delete[PowerDeny.powDisguisSWADE]
    perform focus.delete[PowerDeny.powHealingSWADE]
    perform focus.delete[PowerDeny.powInvisSWADE]
    perform focus.delete[PowerDeny.powLightDarkSWADE]
    perform focus.delete[PowerDeny.powReliefSWADE]
    perform focus.delete[PowerDeny.powSRASpeakSelf]

	]]></procedure>

  <procedure id="GiveWerePsiList" scripttype="eval"><![CDATA[
    ~declare variables that are used to communicate with our caller
    var clearPwrs as number
	
	~ other variables
    var myTag as string
	
	~ set up available Powers
	perform hero.childfound[arcPsionicSWADE].setfocus
	doneif (state.isfocus = 0)
    
    ~ all powers are denied if clearTags = 1
	if (clearPwrs = 1) then
	  foreach thing in Power
	    myTag = "PowerDeny." & eachthing.idstring
	    perform focus.assignstr[myTag]
	    nexteach
	  endif
	
    perform focus.delete[PowerDeny.powArcaneProtect]
    perform focus.delete[PowerDeny.powDetectSWADE]
    perform focus.delete[PowerDeny.powEmpathySWADE]
    perform focus.delete[PowerDeny.powMindLinkSWADE]
    perform focus.delete[PowerDeny.powMindReadSWADE]

	]]></procedure>

	
  <procedure id="GiveTechWizList" scripttype="eval"><![CDATA[
    ~declare variables that are used to communicate with our caller
    var clearPwrs as number
	
	~ other variables
    var myTag as string
	
	~ set up available Powers
	perform hero.childfound[arcWeirdSWADE].setfocus
	doneif (state.isfocus = 0)
    
    ~ all powers are denied if clearTags = 1
	if (clearPwrs = 1) then
	  foreach thing in Power
	    myTag = "PowerDeny." & eachthing.idstring
	    perform focus.assignstr[myTag]
	    nexteach
	  endif
	  
    perform focus.delete[PowerDeny.powArcaneProtect]
    perform focus.delete[PowerDeny.powBarrierSWADE]
    perform focus.delete[PowerDeny.powBlastSWADE]
    perform focus.delete[PowerDeny.powBlindSWADE]
    perform focus.delete[PowerDeny.powBoltSWADE]
    perform focus.delete[PowerDeny.powTraitSWADE]
    perform focus.delete[PowerDeny.powBurrowSWADE]
    perform focus.delete[PowerDeny.powBurstSWADE]
    perform focus.delete[PowerDeny.powConfusiSWADE]
    perform focus.delete[PowerDeny.powDetectSWADE]
    perform focus.delete[PowerDeny.powDamageFSWADE]
    perform focus.delete[PowerDeny.powDarksigSWADE]
    perform focus.delete[PowerDeny.powDeflectSWADE]
    perform focus.delete[PowerDeny.powDispelSWADE]
    perform focus.delete[PowerDeny.powDrainPPSWADE]
    perform focus.delete[PowerDeny.powEntangSWADE]
    perform focus.delete[PowerDeny.powEnvironSWADE]
    perform focus.delete[PowerDeny.powFarsightSWADE]
    perform focus.delete[PowerDeny.powFlySWADE]
    perform focus.delete[PowerDeny.powHavocSWADE]
    perform focus.delete[PowerDeny.powHealingSWADE]
    perform focus.delete[PowerDeny.powIntangiSWADE]
    perform focus.delete[PowerDeny.powInvisSWADE]
    perform focus.delete[PowerDeny.powLightDarkSWADE]
    perform focus.delete[PowerDeny.powProtection]
    perform focus.delete[PowerDeny.powReliefSWADE]
    perform focus.delete[PowerDeny.powSlothSpedSWADE]
    perform focus.delete[PowerDeny.powSlumberSWADE]
    perform focus.delete[PowerDeny.powSmiteSWADE]
    perform focus.delete[PowerDeny.powSoundSilSWADE]
    perform focus.delete[PowerDeny.powSpeakSWADE]
    perform focus.delete[PowerDeny.powStunSWADE]
    perform focus.delete[PowerDeny.powTelekinSWADE]
    perform focus.delete[PowerDeny.powTeleporSWADE]
    perform focus.delete[PowerDeny.powWallWlkSWADE]
    perform focus.delete[PowerDeny.powWarriorSWADE]
	]]></procedure>

  <procedure id="GiveStdPsionicList" scripttype="eval"><![CDATA[
    ~declare variables that are used to communicate with our caller
    var clearPwrs as number
	
	~ other variables
    var myTag as string
	
	~ set up available Powers
	perform hero.childfound[arcPsionicSWADE].setfocus
	doneif (state.isfocus = 0)
    
    ~ all powers are denied if clearTags = 1
	if (clearPwrs = 1) then
	  foreach thing in Power
	    myTag = "PowerDeny." & eachthing.idstring
	    perform focus.assignstr[myTag]
	    nexteach
	  endif
	  
    perform focus.delete[PowerDeny.powSRAArcProSelf]
    perform focus.delete[PowerDeny.powBoltSWADE]
    perform focus.delete[PowerDeny.powSRABoostSelf]
    perform focus.delete[PowerDeny.powSRADetectSelf]
    perform focus.delete[PowerDeny.powConfusiSWADE]
    perform focus.delete[PowerDeny.powSRADarksightSe]
    perform focus.delete[PowerDeny.powSRADisguiseSel]
    perform focus.delete[PowerDeny.powDivinatSWADE]
    perform focus.delete[PowerDeny.powEmpathySWADE]
    perform focus.delete[PowerDeny.powEntangSWADE]
    perform focus.delete[PowerDeny.powSRAEnvProSelf]
    perform focus.delete[PowerDeny.powSRAFarsightSel]
    perform focus.delete[PowerDeny.powFearSWADE]
    perform focus.delete[PowerDeny.powSRAFlySelf]
    perform focus.delete[PowerDeny.powHavocSWADE]
    perform focus.delete[PowerDeny.powHealingSWADE]
    perform focus.delete[PowerDeny.powMindLinkSWADE]
    perform focus.delete[PowerDeny.powObjectRdSWADE]
    perform focus.delete[PowerDeny.powReliefSWADE]
    perform focus.delete[PowerDeny.powTelekinSWADE]
    perform focus.delete[PowerDeny.powSRAWarGiftSelf]
	]]></procedure>

  <procedure id="GiveStdArcaneList" scripttype="eval"><![CDATA[
    ~declare variables that are used to communicate with our caller
    var clearPwrs as number
	
	~ other variables
    var myTag as string
	
	~ set up available Powers
	perform hero.childfound[arcMagicSWADE].setfocus
	doneif (state.isfocus = 0)
    
    ~ all powers are denied if clearTags = 1
	if (clearPwrs = 1) then
	  foreach thing in Power
	    myTag = "PowerDeny." & eachthing.idstring
	    perform focus.assignstr[myTag]
	    nexteach
	  endif
	  
    perform focus.delete[PowerDeny.powArcaneProtect]
    perform focus.delete[PowerDeny.powBanishSWADE]
    perform focus.delete[PowerDeny.powBarrierSWADE]
    perform focus.delete[PowerDeny.powBlastSWADE]
    perform focus.delete[PowerDeny.powBlindSWADE]
    perform focus.delete[PowerDeny.powBoltSWADE]
    perform focus.delete[PowerDeny.powTraitSWADE]
    perform focus.delete[PowerDeny.powBurrowSWADE]
    perform focus.delete[PowerDeny.powBurstSWADE]
    perform focus.delete[PowerDeny.powDetectSWADE]
    perform focus.delete[PowerDeny.powConfusiSWADE]
    perform focus.delete[PowerDeny.powDamageFSWADE]
    perform focus.delete[PowerDeny.powDarksigSWADE]
    perform focus.delete[PowerDeny.powDeflectSWADE]
    perform focus.delete[PowerDeny.powDisguisSWADE]
    perform focus.delete[PowerDeny.powDispelSWADE]
    perform focus.delete[PowerDeny.powDrainPPSWADE]
    perform focus.delete[PowerDeny.powElementSWADE]
    perform focus.delete[PowerDeny.powEntangSWADE]
    perform focus.delete[PowerDeny.powEnvironSWADE]
    perform focus.delete[PowerDeny.powFarsightSWADE]
    perform focus.delete[PowerDeny.powFearSWADE]
    perform focus.delete[PowerDeny.powFlySWADE]
    perform focus.delete[PowerDeny.powGrowShrSWADE]
    perform focus.delete[PowerDeny.powHavocSWADE]
    perform focus.delete[PowerDeny.powHealingSWADE]
    perform focus.delete[PowerDeny.powIllusionSWADE]
    perform focus.delete[PowerDeny.powIntangiSWADE]
    perform focus.delete[PowerDeny.powInvisSWADE]
    perform focus.delete[PowerDeny.powLightDarkSWADE]
    perform focus.delete[PowerDeny.powProtection]
    perform focus.delete[PowerDeny.powPuppetSWADE]
    perform focus.delete[PowerDeny.powSlothSpedSWADE]
    perform focus.delete[PowerDeny.powSlumberSWADE]
    perform focus.delete[PowerDeny.powSmiteSWADE]
    perform focus.delete[PowerDeny.powSoundSilSWADE]
    perform focus.delete[PowerDeny.powSpeakSWADE]
    perform focus.delete[PowerDeny.powStunSWADE]
    perform focus.delete[PowerDeny.powSumAllySWADE]
    perform focus.delete[PowerDeny.powTelekinSWADE]
    perform focus.delete[PowerDeny.powTeleporSWADE]
    perform focus.delete[PowerDeny.powWallWlkSWADE]
    perform focus.delete[PowerDeny.powWarriorSWADE]
	]]></procedure>
	
  <procedure id="GiveNegaPsychList" scripttype="eval"><![CDATA[
    ~declare variables that are used to communicate with our caller
    var clearPwrs as number
	
	~ other variables
    var myTag as string
	
	~ set up available Powers
	perform hero.childfound[arcPsionicSWADE].setfocus
	doneif (state.isfocus = 0)
    
    ~ all powers are denied if clearTags = 1
	if (clearPwrs = 1) then
	  foreach thing in Power
	    myTag = "PowerDeny." & eachthing.idstring
	    perform focus.assignstr[myTag]
	    nexteach
	  endif
	  
    perform focus.delete[PowerDeny.powSRAArcProSelf]
    perform focus.delete[PowerDeny.powBanishSWADE]
    perform focus.delete[PowerDeny.powSRABoostSelf]
    perform focus.delete[PowerDeny.powSRADarksightSe]
    perform focus.delete[PowerDeny.powSRAEnvProSelf]
    perform focus.delete[PowerDeny.powHavocSWADE]
    perform focus.delete[PowerDeny.powSRASmiteSelf]
    perform focus.delete[PowerDeny.powTelekinSWADE]
	]]></procedure>
	
  <procedure id="GiveZapperList" scripttype="eval"><![CDATA[
    ~declare variables that are used to communicate with our caller
    var clearPwrs as number
	
	~ other variables
    var myTag as string
	
	~ set up available Powers
	perform hero.childfound[arcPsionicSWADE].setfocus
	doneif (state.isfocus = 0)
    
    ~ all powers are denied if clearTags = 1
	if (clearPwrs = 1) then
	  foreach thing in Power
	    myTag = "PowerDeny." & eachthing.idstring
	    perform focus.assignstr[myTag]
	    nexteach
	  endif
	  
	perform focus.delete[PowerDeny.powArcaneProtect]  
	perform focus.delete[PowerDeny.powSRABoostSelf]
	perform focus.delete[PowerDeny.powBurstSWADE]
	perform focus.delete[PowerDeny.powConfusiSWADE]
	perform focus.delete[PowerDeny.powSRADarksightSe]
	perform focus.delete[PowerDeny.powSRADeflectSelf]
	perform focus.delete[PowerDeny.powSRADetectSelf]
	perform focus.delete[PowerDeny.powEmpathySWADE]
	perform focus.delete[PowerDeny.powSRAFarsightSel]
	perform focus.delete[PowerDeny.powFearSWADE]
	perform focus.delete[PowerDeny.powSRAFlySelf]
	perform focus.delete[PowerDeny.powLightDarkSWADE]
	perform focus.delete[PowerDeny.powMindLinkSWADE]
	perform focus.delete[PowerDeny.powSRAProtectSelf]
	perform focus.delete[PowerDeny.powSRAReliefSelf]
	perform focus.delete[PowerDeny.powSRASmiteSelf]
	perform focus.delete[PowerDeny.powTelekinSWADE]
	perform focus.delete[PowerDeny.powSRAWarGiftSelf]
	]]></procedure>
	
  <procedure id="MouseInfoSRA" context="info"><![CDATA[
    ~declare variables that are used to communicate with our caller
    var mouseinfo as string

    ~declare variables that are used internally
    var v_name as string

    ~get the item name; if this is a pick, amend the name with our gear quantity
    v_name = field[name].text
    if (ispick <> 0) then
      ~if this is gear with a quantity of more than one, append it to the name
      if (isgear <> 0) then
        if (stackable <> 0) then
          if (field[stackQty].value > 1) then
            v_name &= " (x" & field[stackQty].text & ")"
            endif
          endif
        endif
      endif

    ~start our info text with the centered name and switch to left-justified text
    mouseinfo = "{b}" & v_name & "{/b}{br}{br}{align left}"

    ~get the rest of the details for the item using the normal description procedure;
    ~we call another procedure, so we must declare the variables it uses to pass in
    ~our state and return the synthesized text, then pull the results out of the
    ~variable for our use
    var descript as string
    call DescriptSRA
    mouseinfo &= descript]]></procedure>
	
  <procedure id="DescriptSRA" context="info"><![CDATA[
    ~declare variables that are used to communicate with our caller
    var descript as string
    var isprereq as number
    var skipprereq as number

    ~declare variables that are used by called procedures
    var iteminfo as string

    ~if this is a show-only thing, just output any description text and we're done
    if (tagis[thing.showonly] <> 0) then
      descript = field[descript].text
      done
      endif

    ~we start our details text with nothing
    descript = ""

    ~if requested or renderend for a thing, append any failed prereq details
    if (skipprereq = 0) then
      if (isprereq + !ispick <> 0) then
        var prereqs as string
        call Prereqs
        descript &= prereqs
        endif
      endif

    ~based on the nature of the item, synthesize the appropriate details that are
    ~specific to the particular item type
    iteminfo = ""
    if (tagis[component.WeapRange] <> 0) then
      call InfoRangeSRA
    elseif (tagis[component.WeapMelee] <> 0) then
      call InfoMeleeSRA
    elseif (tagis[component.Defense] <> 0) then
      call InfoDefSRA
    elseif (tagis[component.Power] <> 0) then
      call InfoPower
    elseif (tagis[component.Advance] <> 0) then
      call InfoAdv
    elseif (tagis[component.Vehicle] <> 0) then
      call InfoVehicleSRA
    elseif (tagis[component.Hindrance] <> 0) then
      call InfoHinder
    elseif (tagis[component.Edge] <> 0) then
      call InfoEdge
    elseif (tagis[component.Race] <> 0) then
      call InfoRace
    elseif (tagis[component.Skill] <> 0) then
      call InfoSkill
    ~RDS SPC these next three are for the Super Powers Companion
    elseif (tagis[component.SPCPower] <> 0) then
      call InfoSPower
    elseif (tagis[component.SPCModify] <> 0) then
      call InfoPwrMod
    elseif (tagis[component.PowerLevel] <> 0) then
      call InfoPwrLvl
    ~RDS FC This is for magic items
    elseif (tagis[component.miPower] <> 0) then
      call InfoMPower
    elseif (tagis[component.miSkill] <> 0) then
      call InfoMSkill
    elseif (tagis[component.miEdge] <> 0) then
      call InfoMEdge
      endif

    ~RDS This provides the description of the magical properties of an item under construction
    if (tagis[component.miDetail] <> 0) then
      call InfoMagItD
      endif

    ~RDS This provides the description of the magical properties of an item
    if (tagis[component.MagicItem] <> 0) then
      call InfoMagItm
      endif
      
    ~RDS SFC This provides the description of the modification properties of an item
    if (tagis[component.Modificatn] + tagis[ItemMod.ItemModHelper] <> 0) then
      call InfoModsSRA
      endif
    
    ~RDS SFC This provides the description of the cyberware properties of an item
    if (tagis[component.Cyberware] <> 0) then
      call InfoCyber
      endif
      
    ~RDS SFC This provides the description of the cyberware properties of an item
    if (tagis[component.Robotics] <> 0) then
      call InfoRobot
      endif
      
    ~if this is a piece of gear, append proper info to the item-specific details
    if (tagis[component.Gear] <> 0) then

      ~if this is a thing, append the cost
      if (ispick = 0) then
        if (tagis[User.SizeCost] <> 0) then
          var kdollars as number
          kdollars = field[grCost].value / 1000
          if (hero.tagis[Hero.CashBackwd] = 0) then
            iteminfo &= "Cost: " & herofield[acCshSymbl].text & kdollars & "K * Size (" & container.parent.field[vhSize].text & "){br}"
          else
            iteminfo &= "Cost: " & kdollars & "K * Size (" & container.parent.field[vhSize].text & ")" & herofield[acCshSymbl].text & "{br}"
            endif
        else
          if (hero.tagis[Hero.CashBackwd] = 0) then
            iteminfo &= "Cost: " & herofield[acCshSymbl].text & field[grCost].text & "{br}"
          else
            iteminfo &= "Cost: " & field[grCost].text & herofield[acCshSymbl].text & "{br}"
            endif
          endif
        endif

      ~append the item's weight
      ~ if (ispick <> 0) then
        ~ iteminfo &= "{br}"
        ~ endif
	  
	  if (tagis[component.Vehicle] = 0) then
	    if (tagis[Equipment.Natural] = 0) then
          iteminfo &= "Weight: "
		
          if (field[gearWeight].value > 0) then
            iteminfo &= field[gearWeight].value & " each"
          else
            iteminfo &= chr(150)
            endif
		  endif
		endif
		
      iteminfo &= "{br}"

      ~append the item's availability if applicable
      if (hero.tagis[source.GearAvail] <> 0) then
        if (tagis[GearAvail.?] > 0) then
          iteminfo &= "Availability: "
          iteminfo &= tagnames[GearAvail.?]
          endif
        iteminfo &= "{br}"
        endif
      endif

    ~append our item-specific info to the synthesized details text
    descript &= iteminfo

    ~append the description of the item
    if (empty(iteminfo) = 0) then
      descript &= "{br}"
      endif
	
	call GetDescription

    ~RDS SPC2 If this is a Super Power from the Super Powers Companion, list it's non-generic modifers after the description.
    if (tagis[component.SPCPower] <> 0) then
      var header as number
      header = 0
      foreach thing in SPCModify where "!Helper.GenPwrMod"
        if (eachthing.tagmatch[SPCPwrMod,SPCPwrMod,current] <> 0) then 
          if (header = 0) then
            descript &= "{br}{br}{b}Modifiers:{/b} "
            header = 1
            endif

          descript &= "{br}" & chr(149) & " {b}" & eachthing.field[name].text & " ("
         
          var operator as string
  
          if     ( eachthing.tagis[MathOps.Add] = 1 ) then
              operator = "+"
          elseif ( eachthing.tagis[MathOps.Subtract] = 1 ) then
              operator = "-"
          elseif ( eachthing.tagis[MathOps.SubAllow0] = 1 ) then
              operator = "-"
          elseif ( eachthing.tagis[MathOps.Multiply] = 1 ) then
              operator = "x"
          elseif ( eachthing.tagis[MathOps.Divide] = 1 ) then
              operator = "/"
          endif
      
          descript &= operator & eachthing.field[spmModVal].text & "): {/b}"
          descript &= eachthing.field[descript].text & "{br}"
          endif
        nexteach
        descript &= "{br}"
      endif

    ~if this is gear, output any container/containee details
    if (isgear <> 0) then

      ~if we're held somewhere, append our path
      if (isgearheld <> 0) then
        descript &= "{br}{br}{b}Container{/b}: " & gearpath["->"]
        endif

      ~if we're a gear holder, append our contents
      if (isgearlist <> 0) then
        iteminfo = gearlist[", ", TRUE]
        if (empty(iteminfo) <> 0) then
          iteminfo = "None"
          endif
        descript &= "{br}{br}{b}Carries{/b}: " & iteminfo
        endif

      endif
	  ]]></procedure>

  <procedure id="GetDescription" context="info"><![CDATA[
    ~declare variables that are used to communicate with our caller
    var descript as string
  
	if (tagis[component.CustomDesc] <> 0) then
	
      if (field[CustDesc].isempty <> 0) then
        descript &= chr(150) & " no description " & chr(150)
      else
        descript &= field[CustDesc].text
        endif
		
	else
      if (field[descript].isempty <> 0) then
        descript &= chr(150) & " no description " & chr(150)
      else
        descript &= field[descript].text
        endif
		
	  endif
	  
	  
	]]></procedure>
  
  <!-- Procedure InfoDef
        Generate details specific to defensive gear, including armor and shields.
        The text is placed into the "iteminfo" variable for subsequent use by our
        caller.

        Outbound parameter: iteminfo
  -->
  <procedure id="InfoDefSRA" context="info"><![CDATA[
    ~declare variables that are used to communicate with our caller
    var iteminfo as string

    ~if this is armor, output the appropriate details
    if (tagis[component.Armor] <> 0) then

      ~add the armor rating
      iteminfo &= "Armor: " & field[defDefense].text & "{br}"
	  
      if (field[defToughness].value <> 0) then
	    ~add the toughness rating
	    iteminfo &= "Toughness: " & signed(field[defToughness].value) & "{br}"
		endif

      ~identify the areas covered by the armor
      iteminfo &= "Coverage: " & field[defCoverage].text & "{br}"

    ~otherwise, this is a shield, so output the appropriate details
    else

      ~add the parry bonus
      iteminfo &= "Parry Bonus: " & signed(field[defParry].value) & "{br}"

      ~add the cover adjustment
      iteminfo &= "Cover Modifier: " & signed(field[defCover].value) & "{br}"

      ~add the ranged attack defense (if any)
      if (field[defDefense].value > 0) then
        iteminfo &= "Ranged Defense: " & field[defDefense].text & "{br}"
        endif
      endif

    ~report the minimum strength requirement (omitting if there is none)
    if (hero.tagis[source.AdventureEd] <> 0) then
      if (tagis[ArmorStrReqDie.?] <> 0) then
        iteminfo &= "Minimum Strength: " & tagnames[ArmorStrReqDie.?] & "{br}"
        endif

      ~report the Hardness (omitting if there is none)
      if (field[grHardness].value > 0) then
        iteminfo &= "Hardness: " & field[grHardness].value & "{br}"
        endif

      ~report any special notes (omitting if there is none)
      if (field[defSpecDisp].isempty = 0) then
        iteminfo &= "Special: " & field[defSpecDisp].text & "{br}"
        endif
	  
    elseif (field[defStrReq].value > 0) then
      iteminfo &= "Minimum Strength: " & field[defStrReq].text & "{br}"
      endif


    ]]></procedure>
	
  <!-- Procedure InfoWeapon
        Generate details specific to all weapons. The text is placed into the
        "iteminfo" variable for subsequent use by our caller.

        Outbound parameter: iteminfo
  -->
  <procedure id="InfoWeaponSRA" context="info"><![CDATA[
    ~declare variables that are used to communicate with our caller
    var iteminfo as string

    ~report the weapon bonus (omitting if there is none)
    iteminfo = ""
    if (field[wpBonus].value <> 0) then
      iteminfo &= "Weapon Bonus/Penalty: "
      if (field[wpBonus].value > 0) then
        iteminfo &= "+"
        endif
      iteminfo &= field[wpBonus].text & "{br}"
      endif

    ~report the net attack rating of the weapon
    iteminfo &= "Net Attack: " & field[wpNetAtk].text & "{br}"

    ~report the damage rating of the weapon
    iteminfo &= "Damage Rating: " 
	
    if (tagis[component.WeaponBaseSRA] = 0) then
      iteminfo &= field[wpShowDmg].text & "{br}"
    else
      iteminfo &= field[wpShowDmgAlt].text & "{br}"
      endif
			
    ~report the armor piercing rating of the weapon (if any)
    if (field[wpPiercing].value > 0) then
      iteminfo &= "Armor Piercing: " & field[wpPiercing].text & "{br}"
      endif

    ~report the minimum strength requirement (omitting if there is none)
    if (tagis[StrReqDie.?] <> 0) then
      var minstr as number
      minstr = tagvalue[StrReqDie.?] * 2
      iteminfo &= "Minimum Strength: d" & minstr & "{br}"
      endif

    ~report the Modification Slots taken up by the weapon (if any)
    if (field[grModsUsed].isempty = 0) then
      iteminfo &= "Mod Slots: " & field[grModsUsed].text & "{br}"
      endif
    ]]></procedure>


  <!-- Procedure InfoWeapSp
        Generate special abilities specific to all weapons. This is separate from
        the "InfoWeapon" procedure so that it can always be performed last. The
        text is placed into the "iteminfo" variable for subsequent use by our caller.

        Outbound parameter: iteminfo
  -->
  <procedure id="InfoWeapSpSRA" context="info"><![CDATA[
    ~declare variables that are used to communicate with our caller
    var iteminfo as string

    ~report any special details about the weapon (omitting if there are none)
    var special as string
    special = tagnames[Weapon.?,", "]
    if (!field[wpSpecial].isempty + !empty(special) > 0) then
      iteminfo &= "Special: "
      if (empty(special) = 0) then
        iteminfo &= special
        endif
      if (field[wpSpecial].isempty = 0) then
        if (empty(special) = 0) then
          iteminfo &= ", "
          endif
        iteminfo &= field[wpSpecial].text
        endif
      iteminfo &= "{br}"
      endif
    ]]></procedure>


  <!-- Procedure InfoMelee
        Generate details specific to a melee weapon. The text is placed into the
        "iteminfo" variable for subsequent use by our caller.

        Outbound parameter: iteminfo
  -->
  <procedure id="InfoMeleeSRA" context="info"><![CDATA[
    ~declare variables that are used to communicate with our caller
    var iteminfo as string

    ~start with generic details for all weapons
    call InfoWeaponSRA

    ~if the weapon fails its strength requirement, change color and style
    if (tagis[Helper.BadStrReq] <> 0) then
      iteminfo &= "{text clrbadreq}{i}"
      endif

    ~report the parry adjustment of the weapon (if any)
    if (field[wpParry].value <> 0) then
      iteminfo &= "Parry Adjustment: " & signed(field[wpParry].value) & "{br}"
      endif

    ~report the reach of the weapon (if any)
    if (field[wpReach].value > 0) then
      iteminfo &= "Reach: " & field[wpReach].text & "{br}"
      endif

    ~if the weapon fails its strength requirement, restore color and style
    if (tagis[Helper.BadStrReq] <> 0) then
      iteminfo &= "{/i}{text clrreset}"
      endif

    ~finish with generic special abilities for all weapons
    call InfoWeapSp
    ]]></procedure>


  <!-- Procedure InfoRange
        Generate details specific to a ranged weapon. The text is placed into the
        "iteminfo" variable for subsequent use by our caller.

        Outbound parameter: iteminfo
  -->
  <procedure id="InfoRangeSRA" context="info"><![CDATA[
    ~declare variables that are used to communicate with our caller
    var iteminfo as string

    ~start with generic details for all weapons
    call InfoWeaponSRA

    ~add the range details for the weapon
    iteminfo &= "Range: " & field[wpRange].text & "{br}"

    ~report the fire rate of the weapon
    iteminfo &= "Rate of Fire: " & field[wpFireRate].text & "{br}"

    ~report the number of shots for the weapon (if any)
    if (field[wpShots].value > 0) then
      iteminfo &= "# Shots: " & field[wpShots].text & "{br}"
      endif

    ~report the number of actions to reload the weapon (if any)
    if (field[wpReload].value > 0) then
      iteminfo &= "Actions to Reload: " & field[wpReload].text & "{br}"
      endif

    ~report the ammunition for the weapon (if any)
    if (field[wpAmmo].isempty = 0) then
      iteminfo &= "Ammunition: " & field[wpAmmo].text & "{br}"
      endif

    ~finish with generic special abilities for all weapons
    call InfoWeapSp
    ]]></procedure>
	
  <procedure id="InfoModsSRA" context="info"><![CDATA[
    ~declare variables that are used to communicate with our caller
    var iteminfo as string
    if (field[grDupMax].isempty = 0) then 
      iteminfo &= "Max # Allowed: " & field[grDupMax].text & "{br}"
      endif
	  
    if (compare(field[grModsOrig].text,field[grModsUsed].text) <> 0) then
      if (field[lotsize].value > 1) then
        var total as number
        total = field[grModsUsed].text * field[lotsize].value
        if (total > 0) then
          iteminfo &= "Slot Cost: " & total & "{br}"
          endif
      elseif (stackable = 1) then
        if (field[stackQty].value > 1) then 
          var total as number
          total = field[grModsUsed].text * field[stackQty].value
          if (total > 0) then
            iteminfo &= "Slot Cost: " & total & "{br}"
            endif
          endif
      elseif (field[grModsOrig].isempty = 0) then 
        iteminfo &= "Slot Cost: " & field[grModsOrig].text & ", actual cost is " & field[grModsUsed].text & "{br}"
      else
        if (field[grModsUsed].isempty = 0) then 
          iteminfo &= "Slot Cost: " & field[grModsUsed].text & "{br}"
          endif
      endif
    else
      if (field[grModsUsed].isempty = 0) then 
        iteminfo &= "Slot Cost: " & field[grModsUsed].text & "{br}"
        endif
      endif

	~if there is no child entity/gizmo, then there's nothing more to do
    if (isentity <> 0) then
	  var manTags as string
	  var itmTags as string
	  
	  ~ ItemMods gizmo
	  if (tagis[ItemMod.ItemModHelper] <> 0) then
		
	    ~ Manufacturer 
	    foreach pick in gizmo from ItemMod where "ItemModType.Manufact"
	      manTags = splice(manTags,eachpick.field[name].text,", ")
	      nexteach

        if (empty(manTags) = 0) then
	      iteminfo &= "{br}" & "Manufacturer: " & manTags & "{br}"
          endif
		  
	    ~ Item Modifications
		~iteminfo &= "Item Mods: " & tagnames[ItemMod.?,", "]  & "{br}" 
		
	    foreach pick in gizmo from ItemMod where "ItemMod.? & !ItemModType.Manufact"
	      itmTags = splice(itmTags,eachpick.field[name].text,", ")
	      nexteach

        if (empty(itmTags) = 0) then
	      iteminfo &= "Modifications: " & itmTags & "{br}"
          endif		
		
	    endif
	  endif
	
    iteminfo &= "{br}"]]></procedure>
	
  <procedure id="InfoVehicleSRA" context="info"><![CDATA[
    ~declare variables that are used to communicate with our caller
    var iteminfo as string

    ~get name and description
    ~call InfoNameSRA

    ~report the vehicle size
    iteminfo &= "{b}Size:{/b} " & field[vhSize].value & "{br}"
	
	~report the toughness and armor
    if (tagis[VehType.PowerAr] <> 0) then
      iteminfo &= "{b}Armor{/b}: +" & field[vhArmor].text
	  if (tagis[Vehicle.MDCArmor] <> 0) then
	    iteminfo &= " MDC"
		endif
	  iteminfo &= "{br}"
      iteminfo &= "{b}Toughness{/b}: +" & field[vhTough].text & "{br}"
    else
      iteminfo &= "{b}Toughness(Armor){/b}: " & field[vhTough].text & "(" & field[vhArmor].text & "){br}"
      endif
	
    ~report the acceleration and speed
    if (tagis[VehType.PowerAr] <> 0) then
	  iteminfo &= "{b}Strength:{/b} " & field[vhStrDisplay].text & "{br}"
      iteminfo &= "{b}Pace:{/b} " & field[vhPAPace].text & " + Run d" & field[vhPARunning].text & " (" & field[vhTopSpeed].text & " MPH){br}"
    elseif (tagis[VehType.Walker] <> 0) then
      iteminfo &= "{b}Strength:{/b} " & tagnames[vhWalkerSt.?] & "{br}"
      iteminfo &= "{b}Pace+Run (MPH):{/b} " & field[vhAccel].text & " (" & field[vhTopSpeed].text & " MPH){br}"
    else
      iteminfo &= "{b}Acc/Top Speed:{/b} " & field[vhAccel].text & "/" & field[vhTopSpeed].text & "{br}"
      endif

    ~report the crew size
    if (tagis[VehType.PowerAr] = 0) then
      iteminfo &= "{b}Crew:{/b} " & field[vhCrew].text & "{br}"
      endif

    ~RDS SFC This provides the the upper limit for the number of Modifications allowed on this gear, if this gear is able to be modified
    if (empty(field[grMaxMods].text) = 0) then
      iteminfo &= "{b}Max # Mods Allowed:{/b} " & field[grMaxMods].text & "{br}"
      iteminfo &= "{b}         Current # Mods:{/b} " & field[grCurrMods].text & "{br}"
      endif

    ~finish with generic special traits
    call InfoVehSpSRA
	
    ~if there is no child entity/gizmo, then there's nothing more to do
    doneif (isentity = 0)
	
    ~ Weapons and Equipment
	call InfoVehEqSRA
	
    ~ @text = iteminfo]]></procedure>
	
  <procedure id="InfoVehSpSRA" context="info"><![CDATA[
    ~declare variables that are used to communicate with our caller
    var iteminfo as string

    ~report any special details about the weapon (omitting if there are none)
    var special as string
    special = tagnames[Vehicle.?,", "]
	
	~ if this is a Power Armor, omit the Vehicle.MDCArmor tag aa it's accounted for.
	if (tagis[VehType.PowerAr] <> 0) then
	  special = replace(special, "MDC Armor,", "", 0)
	  endif
	
    if (!field[vhSpecial].isempty + !empty(special) > 0) then
      iteminfo &= "{b}Special:{/b} "
      if (empty(special) = 0) then
        iteminfo &= special
        endif
      if (field[vhSpecial].isempty = 0) then
        if (empty(special) = 0) then
          iteminfo &= ", "
          endif
        iteminfo &= field[vhSpecial].text
        endif
      iteminfo &= "{br}"
      endif]]></procedure>
	  
  <procedure id="InfoNameSRA" context="info"><![CDATA[
    ~declare variables that are used to communicate with our caller
    var iteminfo as string

    ~declare variables that are used internally
    var v_name as string

    ~get the item name; if this is a pick, amend the name with our gear quantity
    v_name = field[name].text
    if (ispick <> 0) then
      ~if this is gear with a quantity of more than one, append it to the name
      if (isgear <> 0) then
        if (stackable <> 0) then
          if (field[stackQty].value > 1) then
            v_name &= " (x" & field[stackQty].text & ")"
            endif
          endif
        endif
      endif

    ~start our info text with the centered name and switch to left-justified text
    iteminfo = "{b}" & v_name & "{/b}{br}{br}{align left}"
	
	if (ispick = 0) then
      ~get the item description
      call InfoDescSRA
	  endif]]></procedure>
	  
  <procedure id="InfoDescSRA" context="info"><![CDATA[
    ~declare variables that are used to communicate with our caller
    var iteminfo as string

    if (field[descript].isempty <> 0) then
      iteminfo &= chr(150) & " no description " & chr(150)
    else
      iteminfo &= field[descript].text
      endif
	  
	iteminfo &= "{br}{br}"]]></procedure>
	
  <procedure id="InfoVehEqSRA" context="info"><![CDATA[
    ~declare variables that are used to communicate with our caller
    var iteminfo as string

    ~if this is a thing, report the basic load-out for the vehicle based on the field;
    ~otherwise, synthesize any load-out for the vehicle as a pick appropriately
    ~Note: We must differentiate between a thing and a pick when accessing the entity,
    ~       as we want summary details for a thing and complete details for a pick
    var loadout as string
	var equipment as string
	var weapons as string
	
    if (ispick = 0) then
      loadout = field[vhLoadout].text & "{br}"
    else
      loadout = ""

      var dupcount as number
      var dupstack as number
      var prevmod as string
	  var currmod as string
      var clipped as number
      var breakit as number
      var ending as number
      var firstpart as string
      var lastpart as string
      var multiplier as string
      var ModList as string
 
      dupcount = 1
      prevmod = ""
      clipped = 0
      breakit = 0
      ending = 0
      multiplier = ""
      ModList = ""

      foreach pick in gizmo
        if (eachpick.tagis[Modificatn.Modificatn] = 0) then
		  if (eachpick.field[livename].isempty = 0) then
		    currmod = eachpick.idstring & eachpick.field[livename].text
	      else 
		    currmod = eachpick.idstring & eachpick.field[modValue].value
			endif
			
		  if (eachpick.tagis[component.WeaponBaseSRA] <> 0) then
		    currmod &= eachpick.field[wpLocation].text
			endif
			
          if (compare(prevmod,currmod) = 0) then
            dupcount += 1
            if (eachpick.field[stackQty].value > 1) then 
              dupstack += eachpick.field[stackQty].value
            else  
              dupstack += 1
              endif
			  
            if (dupcount = 2) then
              breakit = lastpos(ModList," - ")
              ending = length(ModList)
              firstpart = mid(ModList,0,breakit)
              lastpart = mid(ModList,breakit,ending)
              ModList =  firstpart & " (x" & dupstack & ")" & lastpart
            elseif (dupcount > 2) then
              breakit = lastpos(ModList," - ")
              clipped = breakit -5
              ending = length(ModList)
              firstpart = mid(ModList,0,clipped)
              lastpart = mid(ModList,breakit,ending)
              ModList =  firstpart & " (x" & dupstack & ")" & lastpart
              endif
          else
            if (empty(ModList) <> 0) then
			  ModList = "{br}{horz 10}" & chr(149) & " " 
			  
              if (eachpick.field[stackQty].value > 1) then 
                ModList &= eachpick.field[stackQty].value & "x "
                endif
				
			  ModList &= eachpick.field[name].text
			  
			  if (eachpick.tagis[component.WeaponBaseSRA] <> 0) then
			    if (eachpick.field[wpLocation].isempty = 0) then
				  ModList &= " (" & eachpick.field[wpLocation].text & ")"
				  endif
				endif
				
			  ModList &= " - " & eachpick.field[summary].text
            else
			  ModList &= "{br}{horz 10}" & chr(149) & " " 
			  
              if (eachpick.field[stackQty].value > 1) then 
                ModList &= eachpick.field[stackQty].value & "x "
                endif
				
			  ModList &= eachpick.field[name].text
								
			  if (eachpick.tagis[component.WeaponBaseSRA] <> 0) then
			    if (eachpick.field[wpLocation].isempty = 0) then
				  ModList &= " (" & eachpick.field[wpLocation].text & ")"
				  endif
				endif
				
		      ModList &= " - " & eachpick.field[summary].text
              endif
            
            if (eachpick.tagis[WeaponType.?] <> 0) then
              if (eachpick.tagis[WeaponType.FutMelee] + eachpick.tagis[WeaponType.SFVehMelee] <> 0) then
                ModList &= "{br}{horz 20}" & chr(164) & " " & eachpick.field[wpShowDmg].text
              else
                ModList &= "{br}{horz 20}" & chr(164) & " " & eachpick.field[wpShowDmg].text & ", " & eachpick.field[wpRange].text
              endif

              if (eachpick.field[wpNotes].isempty = 0) then
                ModList &= " (" & eachpick.field[wpNotesAlt].text & ")"
              endif
			  
            endif
			 
            ~ prevmod = eachpick.idstring & eachpick.field[modValue].value
			prevmod = currmod
            dupcount = 1
            dupstack = 1
            endif
          endif
        nexteach
      loadout &= ModList & "{br}"
      endif

    ~if there is any equipment for the vehicle, output it
    if (empty(equipment) = 0) then
      iteminfo &= "{b}Equipment:{/b}{br}" & equipment
      endif
	  
    ~if there is any load-out for the vehicle, output it
    if (empty(loadout) = 0) then
      iteminfo &= "{b}Weapons/Equipment:{/b}" & loadout
      endif]]></procedure>
	  
  <procedure id="SizeWounds" scripttype="none"><![CDATA[
~declare variables that are used to communicate with our caller
var sizebonus as number

~bound our final die type appropriately
var herosize as number
   
herosize = #trait[trSize]

if (herosize <= 3) then
  sizebonus = 0
elseif (herosize <= 7) then
  sizebonus = 1
elseif (herosize <= 11) then
  sizebonus = 2
elseif (herosize >= 12) then
  sizebonus = 3
  endif]]></procedure>

  <procedure id="SizeCategory" scripttype="none"><![CDATA[
~declare variables that are used to communicate with our caller
var sizeVal as number
var sizeCat as string

if (sizeVal = -4) then
  sizeCat = "Tiny"   
elseif (sizeVal = -3) then
  sizeCat = "Very Small"
elseif (sizeVal = -2) then
  sizeCat = "Small"
elseif (sizeVal <= 3) then
  sizeCat = "Normal"
elseif (sizeVal <= 7) then
  sizeCat = "Large"
elseif (sizeVal <= 11) then
  sizeCat = "Huge"
elseif (sizeVal >= 12) then
  sizeCat = "Gargantuan"
  endif
  
  ]]></procedure> 
  </document>
