<?xml version="1.0" encoding="UTF-8"?>

<!-- This file contains the definitions of components that don't really fit anywhere
      else, such as resources, journal entries, etc.
-->

<document signature="Hero Lab Structure">


  <component
    id="FraCommon"
    name="Framework Common"
    autocompset="no"
	panellink="framework">

    <!-- Extra value associated with the property -->
    <field
      id="frValue"
      name="Value 1"
      type="derived">
      </field>

    <!-- Extra value associated with the property -->
    <field
      id="frValue2"
      name="Value 2"
      type="derived">
      </field>
	  
    <!-- Extra text associated with the property -->
    <field
      id="frNameAppend"
      name="Extra Text"
      type="derived"
      maxlength="25">
      </field>
	  
    <!-- Extra text associated with the property -->
    <field
      id="frText"
      name="Extra Text"
      type="derived"
      maxlength="25">
      </field>

    <!-- Cost value associated with the property -->
    <field
      id="frCostValue"
      name="Cost Value"
      type="static">
      </field>

    <!-- User value associated with the property -->
    <field
      id="frUserValue"
      name="User Value"
      type="user">
      </field>

    <!-- User text associated with the property -->
    <field
      id="frUserText"
      name="User Text"
      type="user"
      maxlength="25">
      </field>

    <!-- Domain details for something that has a particular focus (e.g. knowledge skills) -->
    <field
      id="frDomain"
      name="Domain"
      maxlength="50"
      type="user">
      </field>

    <!-- Text to display with the checkbox
          NOTE! If this field is empty, it means NO checkbox is shown for the pick.
    -->
    <field
      id="frChkText"
      name="Checkbox Text"
      type="derived"
      maxlength="100">
      </field>

    <!-- Indicates whether the checkbox is selected is not -->
    <field
      id="frIsChecked"
      name="Checked?"
      type="user"
      minvalue="0"
      maxvalue="1">
      </field>
	  
    <field
      id="frNumCopies"
      name="Number of Copies of pick"
      type="derived">
      </field>
	  
    <field
      id="frDupMax"
      name="Max # times allowed"
      type="derived"
      maxlength="10">
      </field>
	  
    <!-- Each Frame Complication needs its own identity tag to detect cascading dependencies via prereqs -->
    <identity group="Framework"/>	
	
    <!-- All Frameworks get the same tag for sorting purposes -->
    <tag group="SpecialTab" tag="RacialProp"/>

    <!-- Track the Frame Ability on the actor -->
    <eval index="1" phase="Setup" priority="5000"><![CDATA[
      perform forward[Framework.?]
      ]]></eval>

    <!-- If we have a user field, map it into the derived field -->
    <eval index="2" phase="Render" priority="1000"><![CDATA[
	  var firstcopy as number
	  var myid as string
	  var mychoice as string
	  var eachchoice as string
	  var mycount as number
	  
      ~ see if a quickfind has been created by another copy of this ability
      perform quickfind.setfocus

      ~ if we didn't find a redirection, we're the first copy of this ability to run this script. 
      ~ (if we also have a selection to make with usrChosen1 field, and it isn't made, we're independant )	  
	  ~ so we'll make ourselves the FirstCopy.
      if (state.isfocus = 0) then
		
		if (field[usrChosen1].ischosen <> 0) then
		  mychoice = "FraChosen." & field[usrChosen1].chosen.idstring
		  perform assignstr[mychoice]
          perform assign[Helper.FirstChosenCopy]
          perform assign[Helper.FirstCopy]
		else
          perform assign[Helper.FirstCopy]
		  endif

        ~add +1 to our value
        field[frNumCopies].value += 1

        ~ add to the quickfind list
        perform quickadd
		
      ~otherwise, redirect hero.child[] to the FirstCopy, and make us an upgrade
      else
	    ~ if we have a selection to make and it's not made, keep as a FirstCopy. 
		if (field[usrCandid1].isempty = 0) then
		  if (field[usrChosen1].ischosen <> 0) then
		    notify this.idstring & " " & field[usrChosen1].chosen.idstring
			endif
		  
		  perform assign[Helper.FirstCopy]
			
		  ~add +1 to our value
          field[frNumCopies].value += 1
		else
          perform focus.redirect
		
		  perform assign[Helper.SpecUp]
		
          ~add +1 to the focus's value
          focus.field[frNumCopies].value += 1
		  endif
        endif
	  
      ]]></eval>
	  
    <!-- If we have a user field, map it into the derived field -->
    <eval index="3" phase="Render" priority="1100"><![CDATA[
	  if (tagis[Helper.FirstCopy] <> 0) then
	    field[spcName].text = field[shortname].text 
		if (field[frNumCopies].value > 1) then
		  field[spcName].text &= " (x" & field[frNumCopies].value & ")"
		  endif
	    endif
      ]]></eval>
	  
    <!-- If we have a user field, map it into the derived field -->
    <eval index="4" phase="Setup" priority="5000"><![CDATA[
      ~if this pick was NOT user-added, no user fields can be accessed
      doneif (isuser = 0)

      ~if we have a user value, put it into the derived field
      if (tagis[User.NeedValue] <> 0) then
        field[frValue].value = field[frUserValue].value

      ~if we have user text, put it into the derived field
      elseif (tagis[User.NeedText] <> 0) then
        field[frText].text = field[frUserText].text
        endif
      ]]></eval>
	  
    <evalrule index="1" phase="Validate" priority="9000" message="Framework Ability exceeds limit on number allowed."><![CDATA[
      var totaluses as number

      if (empty(field[frDupMax].text) = 1) then
        @valid = 1
        endif

      totaluses = container.intersect[FraAbility,FraAbility,counttarget]

      if (totaluses <= field[frDupMax].text) then
        @valid = 1
        endif
      ]]></evalrule>
	  
    </component>
	
<!-- TCA - This component provides for the Abilities of the Iconic Frameworks -->
<!-- FraAbility component
        Each Framework Ability is based upon this component
  -->
  <component
    id="FraAbility"
    name="Framework Ability"
    autocompset="no">
	  
    <!-- Each Frame Ability needs its own identity tag to detect cascading dependencies via prereqs -->
    <identity group="FraAbility"/>

    <!-- Track the Frame Ability on the actor -->
    <eval index="1" phase="Setup" priority="5000"><![CDATA[
      perform forward[FraAbility.?]
      ]]></eval>

    </component>
	
<!-- FraComp component
        Each Framework Complication is based upon this component
  -->
  <component
    id="FraComp"
    name="Framework Complication"
    autocompset="no">
	  
    <!-- Each Frame Complication needs its own identity tag to detect cascading dependencies via prereqs -->
    <identity group="FraComp"/>

    <!-- Track the Frame Complication on the actor -->
    <eval index="1" phase="Setup" priority="5000"><![CDATA[
      perform forward[FraComp.?]
      ]]></eval>

    </component>

  <component
    id="ExprHelpHJ"
    name="Hero's Journey Helper">
	
    <field
      id="ehHJIndex"
      name="Index"
      type="derived"
	  defvalue="0">
	  </field>
	  
    <field
      id="ehHJAdd"
      name="Add Item Header"
      type="derived"
	  maxlength="500">
	  </field>
	  
    <field
      id="ehHJHdr"
      name="Header"
      type="derived"
	  maxlength="500">
	  </field>
	  
    <field
      id="ehHJCst"
      name="Cost"
      type="derived"
	  defvalue="0">
	  </field>
	  
    <field
      id="ehHJExp"
      name="Expression"
      type="derived"
	  maxlength="500">
	  </field> 

    </component>

  <component
    id="ExprHelpFra"
    name="Framework Helper">
	
    <field
      id="ehFrameIndex"
      name="Index"
      type="derived"
	  defvalue="0">
	  </field>
	  
    <field
      id="ehFrameEdgeAdd"
      name="Framework AddItem Header"
      type="derived"
	  maxlength="500">
	  </field>
	  
    <field
      id="ehFrameEdgeHdr"
      name="Framework Expression Header"
      type="derived"
	  maxlength="500">
	  </field>
	  
    <field
      id="ehFrameEdgeCst"
      name="Framework Expression Cost"
      type="derived"
	  defvalue="0">
	  </field>
	  
    <field
      id="ehFrameEdgeExp"
      name="Framework Expression"
      type="derived"
	  maxlength="1500">
	  </field>
	  
    <field
      id="ehFrameHindAdd"
      name="Framework AddItem Header"
      type="derived"
	  maxlength="500">
	  </field>
	  
    <field
      id="ehFrameHindHdr"
      name="Framework Expression Header"
      type="derived"
	  maxlength="500">
	  </field>
	  
    <field
      id="ehFrameHindCst"
      name="Framework Expression Cost"
      type="derived"
	  defvalue="0">
	  </field>
	  
    <field
      id="ehFrameHindExp"
      name="Framework Expression"
      type="derived"
	  maxlength="1500">
	  </field>
	  
    <field
      id="ehFrameAdd"
      name="Framework AddItem Header"
      type="derived"
	  maxlength="500">
	  </field>
	  
    <field
      id="ehFrameHdr"
      name="Framework Expression Header"
      type="derived"
	  maxlength="500">
	  </field>
	  
    <field
      id="ehFrameCst"
      name="Framework Expression Cost"
      type="derived"
	  defvalue="0">
	  </field>
	  
    <field
      id="ehFrameExp"
      name="Framework Expression"
      type="derived"
	  maxlength="1500">
	  </field>
	  
    <field
      id="ehFrameAdd2"
      name="Framework AddItem Header"
      type="derived"
	  maxlength="500">
	  </field>
	  
    <field
      id="ehFrameHdr2"
      name="Framework Expression Header"
      type="derived"
	  maxlength="500">
	  </field>
	  
    <field
      id="ehFrameCst2"
      name="Framework Expression Cost"
      type="derived"
	  defvalue="0">
	  </field>
	  
    <field
      id="ehFrameExp2"
      name="Framework Expression"
      type="derived"
	  maxlength="1500">
	  </field>	
	  
    <field
      id="ehFrameAdd3"
      name="Framework AddItem Header"
      type="derived"
	  maxlength="500">
	  </field>
	  
    <field
      id="ehFrameHdr3"
      name="Framework Expression Header"
      type="derived"
	  maxlength="500">
	  </field>
	  
    <field
      id="ehFrameCst3"
      name="Framework Expression Cost"
      type="derived"
	  defvalue="0">
	  </field>
	  
    <field
      id="ehFrameExp3"
      name="Framework Expression"
      type="derived"
	  maxlength="1500">
	  </field>	
	  
    <field
      id="ehFrameAdd4"
      name="Framework AddItem Header"
      type="derived"
	  maxlength="500">
	  </field>
	  
    <field
      id="ehFrameHdr4"
      name="Framework Expression Header"
      type="derived"
	  maxlength="500">
	  </field>
	  
    <field
      id="ehFrameCst4"
      name="Framework Expression Cost"
      type="derived"
	  defvalue="0">
	  </field>
	  
    <field
      id="ehFrameExp4"
      name="Framework Expression"
      type="derived"
	  maxlength="1500">
	  </field>	
	  
    <field
      id="ehFrameAdd5"
      name="Framework AddItem Header"
      type="derived"
	  maxlength="500">
	  </field>
	  
    <field
      id="ehFrameHdr5"
      name="Framework Expression Header"
      type="derived"
	  maxlength="500">
	  </field>
	  
    <field
      id="ehFrameCst5"
      name="Framework Expression Cost"
      type="derived"
	  defvalue="0">
	  </field>
	  
    <field
      id="ehFrameExp5"
      name="Framework Expression"
      type="derived"
	  maxlength="1500">
	  </field>	
	  
    </component>
	
  <component
    id="ConstructHelper"
    name="Construct Helper">

    <field
      id="chMeleeAdd"
      name="Melee AddItem Header"
      type="derived"
	  maxlength="500">
	  </field>
	  
    <field
      id="chMeleeHdr"
      name="Racial Expression Header"
      type="derived"
	  maxlength="500">
	  </field>
	  
    <field
      id="chMeleeExp"
      name="Melee Weapon Expression"
      type="derived"
	  maxlength="500">
	  </field>

    <field
      id="chMeleeCst"
      name="Melee Weapon Cost"
      type="derived"
	  defvalue="0">
	  </field>
	  
    <field
      id="chRangeAdd"
      name="Melee AddItem Header"
      type="derived"
	  maxlength="500">
	  </field>
	  
    <field
      id="chRangeHdr"
      name="Racial Expression Header"
      type="derived"
	  maxlength="500">
	  </field>
	  
    <field
      id="chRangeExp"
      name="Racial Property Expression"
      type="derived"
	  maxlength="500">
	  </field>	  
    </component>

  <component
    id="ExprHelpTattoo"
    name="Tattoo Selection Helper">
	
    <field
      id="ehTattooIndex"
      name="Index"
      type="derived"
	  defvalue="0">
	  </field>
	  
    <field
      id="ehTattooAdd"
      name="Framework AddItem Header"
      type="derived"
	  maxlength="500">
	  </field>
	  
    <field
      id="ehTattooHdr"
      name="Framework Expression Header"
      type="derived"
	  maxlength="500">
	  </field>
	  
    <field
      id="ehTattooCst"
      name="Framework Expression Cost"
      type="derived"
	  defvalue="0">
	  </field>
	  
    <field
      id="ehTattooExp"
      name="Framework Expression"
      type="derived"
	  maxlength="1500">
	  </field>
	
    </component>	
	
  <component
    id="ExprHelpRace"
    name="Expression Helper">

    <field
      id="ehRaceAdd"
      name="Racial AddItem Header"
      type="derived"
	  maxlength="500">
	  </field>
	  
    <field
      id="ehRaceHdr"
      name="Racial Expression Header"
      type="derived"
	  maxlength="500">
	  </field>
	  
    <field
      id="ehRaceExp"
      name="Racial Property Expression"
      type="derived"
	  maxlength="500">
	  </field>
	  
    </component>
	
  <component
    id="ExprHelp"
    name="Expression Helper">

    <field
      id="ehAdd"
      name="AddItem Header"
      type="derived"
	  maxlength="500">
	  </field>
	  
    <field
      id="ehHdr"
      name="Header"
      type="derived"
	  maxlength="500">
	  </field>
	  
    <field
      id="ehExp"
      name="Expression"
      type="derived"
	  maxlength="500">
	  </field>
	  
    </component>	
	
  <component
    id="ExtRaceAbil"
    name="Racial Ability"
    autocompset="no">

    <!-- Extra value associated with the ability -->
    <field
      id="abilValue2"
      name="Extra Value 2"
      type="derived">
      </field>
	  
    <field
      id="abilValue3"
      name="Extra Value 3"
      type="derived">
      </field>
	  
    </component>
	
  <component
    id="ExtRacialProp"
    name="Racial Property (Extended)"
    autocompset="no">

    <!-- Extra value associated with the ability -->
    <field
      id="raceValue2"
      name="Extra Value 2"
      type="derived">
      </field>
	  
    <field
      id="raceValue3"
      name="Extra Value 3"
      type="derived">
      </field>
	  
    </component>
	
  <!-- CustomDesc component
        Can be added to any other component to allow for a derived
		description to display for the component.
  -->
  <component
    id="CustomDesc"
    name="Custom Description"
	autocompset="yes">

    <!-- Manage an optional user-assigned description for custom things -->
    <field
      id="CustDesc"
      name="descript (custom)"
      maxlength="2500"
      type="derived">
      </field>
	  
    <field
      id="CustSumm"
      name="summary (custom)"
      maxlength="250"
      type="derived">
      </field>
	  
    <!-- If we have a user-assigned name, copy that into the live name -->
    <eval index="1" phase="Render" priority="10000"><![CDATA[
	  ~ if we're empty, then we use the descript field.
	  if (field[CustDesc].isempty <> 0) then
	    ~ if we are empty, then we use the description
        field[CustDesc].text = field[descript].text 
		endif
	  
	  if (field[CustSumm].isempty <> 0) then
	    ~ if the summary field is empty, use the CustDesc
		if (field[summary].isempty <> 0) then
          field[CustSumm].text = field[CustDesc].text
		else
          field[CustSumm].text = field[summary].text
		  endif
		endif
		
      ]]></eval>
	  
    </component>	  

  <component
    id="xCopyTracker"
    name="Copy Tracker"
	autocompset="yes">
    
    <!-- Selection Tag Expressions -->
    <field
      id="xIndex"
      name="Index of Copy"
      type="derived"
      defvalue="0">
      </field>
      
    <field
      id="xCount"
      name="Number of Copies"
      type="derived"
      defvalue="0">
      </field>
    <!-- Stack name field - name is prefixed with the quantity if not a value of one,
          which is important for stackable items that can have varying quantities
    -->
    <field
      id="xCountName"
      name="Name (Qty)"
      type="derived"
      maxfinal="100"
      nevercache="yes">
      <!-- Final value for display consists of the name with a prefixed quantity
            if not one
      -->
      <finalize><![CDATA[
        ~if we have a customized name already, use it; otherwise, use the default name
        var name as string
        if (field[livename].isempty = 0) then
          name = field[livename].text
        else
          name = field[name].text
          endif

        @text = name
		
        if (field[xCount].value <> 1) then
          @text &= " (x" & field[xCount].value & ")"
          endif
        ]]></finalize>
      </field>    
	  
    <!-- Stack name field - name is prefixed with the quantity if not a value of one,
          which is important for stackable items that can have varying quantities
    -->
    <field
      id="xCountShortname"
      name="Short Name (Qty)"
      type="derived"
      maxfinal="100"
      nevercache="yes">
      <!-- Final value for display consists of the name with a prefixed quantity
            if not one
      -->
      <finalize><![CDATA[
        ~if we have a customized name already, use it; otherwise, use the default name
        var name as string
        if (tagis[component.shortname] <> 0) then
          name = field[shortname].text
        else
          name = field[name].text
          endif

        @text = name
		
        if (field[xCount].value <> 1) then
          @text &= " (x" & field[xCount].value & ")"
          endif
        ]]></finalize>
      </field>	  
    <eval index="1" phase="Effects" priority="155" name="Determine First Copy"><![CDATA[
      doneif (tagis[Helper.FirstCopy] <> 0)

      ~if we're not the first copy of a special ability, we need to set up a
      ~redirection to the actual first copy. That means whenever another pick
      ~does a "hero.child[x]" to find pick x, they always arrive at the first
      ~copy. This allows the first copy to be determined at every evaluation,
      ~and the first copy is then the one used to display the totals for the
      ~ability, even if it's added in multiple places (e.g. sneak attack, which
      ~can be added by multiple classes). The first copy is the one in the
      ~quickfind list, so retrieve it.
      perform quickfind.setfocus

      ~if we found a copy to set our focus to, we're a secondary copy of this
      ~ability, delete the Helper.OnlyCopy tag from the first (primary) copy.
      ~That means the Helper.OnlyCopy tag will only be left on those picks that
      ~are the only copy of their things.
      if (state.isfocus <> 0) then
        perform focus.redirect
        perform assign[Helper.SpecUp]
        perform focus.delete[Helper.OnlyCopy]
        endif
      ]]></eval>
	  
    <eval index="2" phase="Effects" priority="200" name="Calc xIndex"><![CDATA[
      ~we only need to run this if we're not the only copy
      ~if we aren't the only copy, we need to search the rest of our copies and get information
      if (tagis[Helper.OnlyCopy] = 0) then

        ~only run these for the first copy
        if (tagis[Helper.FirstCopy] <> 0) then

          var searchexpr as string
          searchexpr = "thingid." & this.idstring

          var index as number
          index = 1

          var runonce as number

          foreach pick in hero from xCopyTracker where searchexpr
            ~assign this thing the current index value, then increment the index for the next thing
            eachpick.field[xIndex].value = index
            index += 1
			
            nexteach

        else
          field[xCount].value += 1
          endif
      else
        ~if we are the only copy, xIndex and xCount = 1
        field[xIndex].value = 1
        field[xCount].value = 1
        endif

      ]]></eval> 

    <eval index="3" phase="Effects" priority="250" name="Calc xCount"><![CDATA[
      ~we only need to run this if we're not the only copy
      ~if we aren't the only copy, we need to search the rest of our copies and get information
      doneif (tagis[Helper.OnlyCopy] <> 0)

      var index as number
      var source as string

      ~only run these if we're the first copy
      if (tagis[Helper.FirstCopy] <> 0) then
        var searchexpr as string
        searchexpr = "thingid." & this.idstring

        foreach pick in hero from xCopyTracker where searchexpr 
          field[xCount].value += 1
          nexteach
		  
        endif

      ]]></eval>	  
    </component>
	  	  	
<!-- TCA - This component set enables the use of Iconic Framework Abilities
           as defined in the Savage Rifts sourcebooks -->
  <!-- FraAbility - all Framework Abilities derive from this compset -->
  <compset
    id="FraAbility">
    <compref component="FraAbility"/>
    <compref component="FraCommon"/>
    <compref component="Ability"/>
    <compref component="Domain"/>
    <compref component="UserSelect"/>
    <compref component="SpecialTab"/>
    <compref component="CustomDesc"/>
    </compset>
	
  <!-- FraComp- all Framework Complications derive from this compset -->
  <compset
    id="FraComp">
    <compref component="FraComp"/>
    <compref component="FraCommon"/>
    <compref component="Ability"/>
    <compref component="Domain"/>
    <compref component="UserSelect"/>
    <compref component="SpecialTab"/>
    <compref component="CustomDesc"/>
    </compset>
	
  <!-- FraComp- all Framework Complications derive from this compset -->
  <compset
    id="ExtRaceAbil">
    <compref component="ExtRaceAbil"/>
    <compref component="RaceAbil"/>
    <compref component="Ability"/>
    <compref component="SpecialTab"/>
    <compref component="CustomDesc"/>
    </compset>
	
 <compset
    id="ExtRacialProp">
    <compref component="ExtRacialProp"/>
    <compref component="RacialProp"/>
    <compref component="Ability"/>
    <compref component="UserSelect"/>
    <compref component="SpecialTab"/>
    <compref component="CanAdvance"/>
    <compref component="CustomDesc"/>
    </compset>
	
  <!-- Savage Rifts Cyberware -->
  <compset
    id="CyberwareSRA"
    stackable="yes">
    <compref component="CyberwareSRA"/>
    <compref component="Gear"/>
    <compref component="Equippable"/>
    <compref component="xCopyTracker"/>
    </compset>
	
 <compset
    id="BioAugmentSRA"
    stackable="yes">
    <compref component="BioAugmentSRA"/>
    <compref component="BioWizardCore"/>
    <compref component="Gear"/>
    <compref component="Domain"/>
    <compref component="UserSelect"/>
    <compref component="Equippable"/>
    <compref component="SpecialTab"/>
    <compref component="xCopyTracker"/>
    </compset>
	
 <compset
    id="BioSymbioteSRA"
    stackable="yes">
    <compref component="BioSymbioteSRA"/>
    <compref component="BioWizardCore"/>
    <compref component="Gear"/>
    <compref component="Domain"/>
    <compref component="UserSelect"/>
    <compref component="Equippable"/>
    <compref component="SpecialTab"/>
    <compref component="xCopyTracker"/>
    </compset>
	
 <compset
    id="BioMicrobeSRA"
    stackable="yes">
    <compref component="BioMicrobeSRA"/>
    <compref component="BioWizardCore"/>
    <compref component="Gear"/>
    <compref component="Domain"/>
    <compref component="UserSelect"/>
    <compref component="Equippable"/>
    <compref component="SpecialTab"/>
    <compref component="xCopyTracker"/>
    </compset>
	
 <compset
    id="BioParasiteSRA"
    stackable="yes">
    <compref component="BioParasiteSRA"/>
    <compref component="BioWizardCore"/>
    <compref component="Gear"/>
    <compref component="Domain"/>
    <compref component="UserSelect"/>
    <compref component="Equippable"/>
    <compref component="SpecialTab"/>
    <compref component="xCopyTracker"/>
    </compset>
	
  </document>
