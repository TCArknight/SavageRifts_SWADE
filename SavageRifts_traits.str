<?xml version="1.0" encoding="UTF-8"?>

<!-- This file contains the definitions of components that don't really fit anywhere
      else, such as resources, journal entries, etc.
-->

<document signature="Hero Lab Structure">


  <component
    id="FraCommon"
    name="Framework Common"
    autocompset="no">

    <!-- Extra value associated with the property -->
    <field
      id="frValue"
      name="Value 1"
      type="derived">
      </field>

    <!-- Extra value associated with the property -->
    <field
      id="frValue2"
      name="Value 2"
      type="derived">
      </field>
	  
    <!-- Extra text associated with the property -->
    <field
      id="frNameAppend"
      name="Extra Text"
      type="derived"
      maxlength="25">
      </field>
	  
    <!-- Extra text associated with the property -->
    <field
      id="frText"
      name="Extra Text"
      type="derived"
      maxlength="25">
      </field>

    <!-- Cost value associated with the property -->
    <field
      id="frCostValue"
      name="Cost Value"
      type="static">
      </field>

    <!-- User value associated with the property -->
    <field
      id="frUserValue"
      name="User Value"
      type="user">
      </field>

    <!-- User text associated with the property -->
    <field
      id="frUserText"
      name="User Text"
      type="user"
      maxlength="25">
      </field>

    <!-- Domain details for something that has a particular focus (e.g. knowledge skills) -->
    <field
      id="frDomain"
      name="Domain"
      maxlength="50"
      type="user">
      </field>

    <!-- Text to display with the checkbox
          NOTE! If this field is empty, it means NO checkbox is shown for the pick.
    -->
    <field
      id="frChkText"
      name="Checkbox Text"
      type="derived"
      maxlength="100">
      </field>

    <!-- Indicates whether the checkbox is selected is not -->
    <field
      id="frIsChecked"
      name="Checked?"
      type="user"
      minvalue="0"
      maxvalue="1">
      </field>
	  
    <field
      id="frNumCopies"
      name="Number of Copies of pick"
      type="derived">
      </field>
	  
    <field
      id="frDupMax"
      name="Max # times allowed"
      type="derived"
      maxlength="10">
      </field>
	  
    <!-- Each Frame Complication needs its own identity tag to detect cascading dependencies via prereqs -->
    <identity group="Framework"/>	
	
    <!-- All Frameworks get the same tag for sorting purposes -->
    <tag group="SpecialTab" tag="RacialProp"/>

    <!-- Track the Frame Ability on the actor -->
    <eval index="1" phase="Setup" priority="5000"><![CDATA[
      perform forward[Framework.?]
      ]]></eval>

    <!-- If we have a user field, map it into the derived field -->
    <eval index="2" phase="Render" priority="1000"><![CDATA[
	  var firstcopy as number
	  var myid as string
	  var mychoice as string
	  var eachchoice as string
	  var mycount as number
	  
      ~ see if a quickfind has been created by another copy of this ability
      perform quickfind.setfocus

      ~ if we didn't find a redirection, we're the first copy of this ability to run this script. 
      ~ (if we also have a selection to make with usrChosen1 field, and it isn't made, we're independant )	  
	  ~ so we'll make ourselves the FirstCopy.
      if (state.isfocus = 0) then
		
		if (field[usrChosen1].ischosen <> 0) then
		  mychoice = "FraChosen." & field[usrChosen1].chosen.idstring
		  perform assignstr[mychoice]
          perform assign[Helper.FirstChosenCopy]
          perform assign[Helper.FirstCopy]
		else
          perform assign[Helper.FirstCopy]
		  endif

        ~add +1 to our value
        field[frNumCopies].value += 1

        ~ add to the quickfind list
        perform quickadd
		
      ~otherwise, redirect hero.child[] to the FirstCopy, and make us an upgrade
      else
	    ~ if we have a selection to make and it's not made, keep as a FirstCopy. 
		if (field[usrCandid1].isempty = 0) then
		  if (field[usrChosen1].ischosen <> 0) then
		    notify this.idstring & " " & field[usrChosen1].chosen.idstring
			endif
		  
		  perform assign[Helper.FirstCopy]
			
		  ~add +1 to our value
          field[frNumCopies].value += 1
		else
          perform focus.redirect
		
		  perform assign[Helper.SpecUp]
		
          ~add +1 to the focus's value
          focus.field[frNumCopies].value += 1
		  endif
        endif
	  
      ]]></eval>
	  
    <!-- If we have a user field, map it into the derived field -->
    <eval index="3" phase="Render" priority="1100"><![CDATA[
	  if (tagis[Helper.FirstCopy] <> 0) then
	    field[spcName].text = field[shortname].text 
		if (field[frNumCopies].value > 1) then
		  field[spcName].text &= " (x" & field[frNumCopies].value & ")"
		  endif
	    endif
      ]]></eval>
	  
    <!-- If we have a user field, map it into the derived field -->
    <eval index="4" phase="Setup" priority="5000"><![CDATA[
      ~if this pick was NOT user-added, no user fields can be accessed
      doneif (isuser = 0)

      ~if we have a user value, put it into the derived field
      if (tagis[User.NeedValue] <> 0) then
        field[frValue].value = field[frUserValue].value

      ~if we have user text, put it into the derived field
      elseif (tagis[User.NeedText] <> 0) then
        field[frText].text = field[frUserText].text
        endif
      ]]></eval>
	  
    <evalrule index="1" phase="Validate" priority="9000" message="Framework Ability exceeds limit on number allowed."><![CDATA[
      var totaluses as number

      if (empty(field[frDupMax].text) = 1) then
        @valid = 1
        endif

      totaluses = container.intersect[FraAbility,FraAbility,counttarget]

      if (totaluses <= field[frDupMax].text) then
        @valid = 1
        endif
      ]]></evalrule>
	  
    </component>
	
<!-- TCA - This component provides for the Abilities of the Iconic Frameworks -->
<!-- FraAbility component
        Each Framework Ability is based upon this component
  -->
  <component
    id="FraAbility"
    name="Framework Ability"
    autocompset="no">
	  
    <!-- Each Frame Ability needs its own identity tag to detect cascading dependencies via prereqs -->
    <identity group="FraAbility"/>

    <!-- Track the Frame Ability on the actor -->
    <eval index="1" phase="Setup" priority="5000"><![CDATA[
      perform forward[FraAbility.?]
      ]]></eval>

    </component>
	
<!-- FraComp component
        Each Framework Complication is based upon this component
  -->
  <component
    id="FraComp"
    name="Framework Complication"
    autocompset="no">
	  
    <!-- Each Frame Complication needs its own identity tag to detect cascading dependencies via prereqs -->
    <identity group="FraComp"/>

    <!-- Track the Frame Complication on the actor -->
    <eval index="1" phase="Setup" priority="5000"><![CDATA[
      perform forward[FraComp.?]
      ]]></eval>

    </component>

  <component
    id="ExprHelpHJ"
    name="Hero's Journey Helper">
	
    <field
      id="ehHJIndex"
      name="Index"
      type="derived"
	  defvalue="0">
	  </field>
	  
    <field
      id="ehHJAdd"
      name="Add Item Header"
      type="derived"
	  maxlength="500">
	  </field>
	  
    <field
      id="ehHJHdr"
      name="Header"
      type="derived"
	  maxlength="500">
	  </field>
	  
    <field
      id="ehHJCst"
      name="Cost"
      type="derived"
	  defvalue="0">
	  </field>
	  
    <field
      id="ehHJExp"
      name="Expression"
      type="derived"
	  maxlength="500">
	  </field> 

    </component>

  <component
    id="ExprHelpFra"
    name="Framework Helper">
	
    <field
      id="ehFrameIndex"
      name="Index"
      type="derived"
	  defvalue="0">
	  </field>
	  
    <field
      id="ehFrameEdgeAdd"
      name="Framework AddItem Header"
      type="derived"
	  maxlength="500">
	  </field>
	  
    <field
      id="ehFrameEdgeHdr"
      name="Framework Expression Header"
      type="derived"
	  maxlength="500">
	  </field>
	  
    <field
      id="ehFrameEdgeCst"
      name="Framework Expression Cost"
      type="derived"
	  defvalue="0">
	  </field>
	  
    <field
      id="ehFrameEdgeExp"
      name="Framework Expression"
      type="derived"
	  maxlength="500">
	  </field>
	  
    <field
      id="ehFrameHindAdd"
      name="Framework AddItem Header"
      type="derived"
	  maxlength="500">
	  </field>
	  
    <field
      id="ehFrameHindHdr"
      name="Framework Expression Header"
      type="derived"
	  maxlength="500">
	  </field>
	  
    <field
      id="ehFrameHindCst"
      name="Framework Expression Cost"
      type="derived"
	  defvalue="0">
	  </field>
	  
    <field
      id="ehFrameHindExp"
      name="Framework Expression"
      type="derived"
	  maxlength="500">
	  </field>
	  
    <field
      id="ehFrameAdd"
      name="Framework AddItem Header"
      type="derived"
	  maxlength="500">
	  </field>
	  
    <field
      id="ehFrameHdr"
      name="Framework Expression Header"
      type="derived"
	  maxlength="500">
	  </field>
	  
    <field
      id="ehFrameCst"
      name="Framework Expression Cost"
      type="derived"
	  defvalue="0">
	  </field>
	  
    <field
      id="ehFrameExp"
      name="Framework Expression"
      type="derived"
	  maxlength="500">
	  </field>
	  
    <field
      id="ehFrameAdd2"
      name="Framework AddItem Header"
      type="derived"
	  maxlength="500">
	  </field>
	  
    <field
      id="ehFrameHdr2"
      name="Framework Expression Header"
      type="derived"
	  maxlength="500">
	  </field>
	  
    <field
      id="ehFrameCst2"
      name="Framework Expression Cost"
      type="derived"
	  defvalue="0">
	  </field>
	  
    <field
      id="ehFrameExp2"
      name="Framework Expression"
      type="derived"
	  maxlength="500">
	  </field>	
	  
    </component>
	
  <component
    id="ConstructHelper"
    name="Construct Helper">

    <field
      id="chMeleeAdd"
      name="Melee AddItem Header"
      type="derived"
	  maxlength="500">
	  </field>
	  
    <field
      id="chMeleeHdr"
      name="Racial Expression Header"
      type="derived"
	  maxlength="500">
	  </field>
	  
    <field
      id="chMeleeExp"
      name="Melee Weapon Expression"
      type="derived"
	  maxlength="500">
	  </field>

    <field
      id="chMeleeCst"
      name="Melee Weapon Cost"
      type="derived"
	  defvalue="0">
	  </field>
	  
    <field
      id="chRangeAdd"
      name="Melee AddItem Header"
      type="derived"
	  maxlength="500">
	  </field>
	  
    <field
      id="chRangeHdr"
      name="Racial Expression Header"
      type="derived"
	  maxlength="500">
	  </field>
	  
    <field
      id="chRangeExp"
      name="Racial Property Expression"
      type="derived"
	  maxlength="500">
	  </field>	  
    </component>
	
  <component
    id="ExprHelpRace"
    name="Expression Helper">

    <field
      id="ehRaceAdd"
      name="Racial AddItem Header"
      type="derived"
	  maxlength="500">
	  </field>
	  
    <field
      id="ehRaceHdr"
      name="Racial Expression Header"
      type="derived"
	  maxlength="500">
	  </field>
	  
    <field
      id="ehRaceExp"
      name="Racial Property Expression"
      type="derived"
	  maxlength="500">
	  </field>
	  
    </component>
	
  <component
    id="ExprHelp"
    name="Expression Helper">

    <field
      id="ehAdd"
      name="AddItem Header"
      type="derived"
	  maxlength="500">
	  </field>
	  
    <field
      id="ehHdr"
      name="Header"
      type="derived"
	  maxlength="500">
	  </field>
	  
    <field
      id="ehExp"
      name="Expression"
      type="derived"
	  maxlength="500">
	  </field>
	  
    </component>	
	
	  
<!-- TCA - This component set enables the use of Iconic Framework Abilities
           as defined in the Savage Rifts sourcebooks -->
  <!-- FraAbility - all Framework Abilities derive from this compset -->
  <compset
    id="FraAbility">
    <compref component="FraAbility"/>
    <compref component="FraCommon"/>
    <compref component="Ability"/>
    <compref component="Domain"/>
    <compref component="UserSelect"/>
    <compref component="SpecialTab"/>
    </compset>
	
  <!-- FraComp- all Framework Complications derive from this compset -->
  <compset
    id="FraComp">
    <compref component="FraComp"/>
    <compref component="FraCommon"/>
    <compref component="Ability"/>
    <compref component="Domain"/>
    <compref component="UserSelect"/>
    <compref component="SpecialTab"/>
    </compset>
	
  </document>
