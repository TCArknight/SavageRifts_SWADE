<?xml version="1.0" encoding="UTF-8"?>

<!-- This file contains the definition of the "Armory" tab panel. This tab is where
      the user selects weapons and armor for the character.

      All public visual elements used with this tab panel start with the prefix "ar"
      to associate them with the tab.
-->

<document signature="Hero Lab Data">

  <portal
    id="arMeleeSRA"
    style="tblNormal">
    <table_dynamic
      component="Gear"
      showtemplate="arWpnPickSRA"
      choosetemplate="arWpnThingSRA"
      choosesortset="Weapon"
      buytemplate="BuyCash"
      selltemplate="SellCash"
      descwidth="275"
	  alwaysupdate="yes">
      <list>component.WeapMelee &amp; !Hide.Modificatn</list>
      <candidate inheritlist="yes"><![CDATA[!Equipment.Natural & !Hide.Equipment]]></candidate>
      <titlebar><![CDATA[
        @text = "Select Hand Weapons to Purchase from the List Below"
        ]]></titlebar>
      <headertitle><![CDATA[
        @text = "Hand Weapons"
        ]]></headertitle>
      <additem><![CDATA[
        @text = "Add New Hand Weapons"
        ]]></additem>
      </table_dynamic>
    </portal>

  <portal
    id="arRangedSRA"
    style="tblNormal">
    <table_dynamic
      component="Gear"
      showtemplate="arWpnPickSRA"
      choosetemplate="arWpnThingSRA"
      choosesortset="Weapon"
      buytemplate="BuyCash"
      selltemplate="SellCash"
      descwidth="275">
      <list>component.WeapRange &amp; !component.WeapSpec</list>
      <candidate inheritlist="yes"><![CDATA[!Equipment.Natural & !Hide.Equipment]]></candidate>
      <titlebar><![CDATA[
        @text = "Select Ranged Weapons to Purchase from the List Below"
        ]]></titlebar>
      <headertitle><![CDATA[
        @text = "Ranged Weapons"
        ]]></headertitle>
      <additem><![CDATA[
        @text = "Add New Ranged Weapons"
        ]]></additem>
      </table_dynamic>
    </portal>
	
  <!-- arArmorSRA portal
        Presents a dynamic table where the user can add armor and shields for the
        character. This portal is identical to "arMelee" above, except that it
        manages defensive gear instead of melee weapons, resulting in a few minor
        but important differences from the melee weapons table.

        Since we show both armor AND shields in the same table, we use the "Armory"
        sortset to sort all of the armor first and then the shields below.
  -->
  <portal
    id="arArmorSRA"
    style="tblNormal">
    <table_dynamic
      component="Gear"
      showtemplate="arSRADefPick"
      choosetemplate="arDefThing"
      choosesortset="ArmorChoose"
      showsortset="ArmorShow"
      buytemplate="BuyCash"
      selltemplate="SellCash"
      descwidth="275">
      <list>component.Defense &amp; !component.MagicItem</list>
      <candidate inheritlist="yes"><![CDATA[!Equipment.Natural & !Hide.Equipment]]></candidate>
      <description/>
      <headertitle><![CDATA[
        @text = "Armor & Shields"
        ]]></headertitle>
      <additem><![CDATA[
        @text = "Add New Armor and Shields"
        ]]></additem>
      </table_dynamic>
    </portal>

  <!-- arSpecial portal
        Presents a dynamic table where the user can add special weapons for the
        character. This portal is identical to "arRangedSRA" above, except that it
        manages special weapons instead of ranged weapons. Since special weapons
        are so similar to ranged weapons, we can re-use the the template.
  -->
  <portal
    id="arSpecialSRA"
    style="tblNormal">
    <table_dynamic
      component="Gear"
      showtemplate="arWpnPickSRA"
      choosetemplate="arWpnThingSRA"
      choosesortset="Weapon"
      buytemplate="BuyCash"
      selltemplate="SellCash"
      descwidth="275">
      <list>component.WeapSpec &amp; !Hide.Modificatn</list>
      <candidate inheritlist="yes"><![CDATA[!Equipment.Natural & !Hide.Equipment]]></candidate>
      <titlebar><![CDATA[
        @text = "Select Special Weapons to Purchase from the List Below"
        ]]></titlebar>
      <headertitle><![CDATA[
        @text = "Special Weapons"
        ]]></headertitle>
      <additem><![CDATA[
        @text = "Add New Special Weapons"
        ]]></additem>
      </table_dynamic>
    </portal>
	
  <!-- arPowerArmorSRA portal
        Presents a dynamic table where the user can add Power Armor for the character.

        We use separate templates for selecting vehicles and showing the vehicles
        that have been chosen. Each of these appears further below.

        We use an "additem" script to simply prompt the user to add vehicles.

        The "buytemplate" and "selltemplate" attributes hook in the logic for
        properly buying and selling vehicles for cash.

        We use a "headertitle" script to place a suitable title above the table.

        The "list" tag expression restricts everything to only vehicles (e.g. no
        weapons). The "candidate" tag expression is omitted, resulting in the same
        contents as the "list" tag expression.
  -->
  <portal
    id="arPowerArmorSRA"
    style="tblNormal">
    <table_dynamic
      component="Gear"
      showtemplate="arPAPickSRA"
      choosetemplate="arPAThingSRA"
      choosesortset="GenVehicle"
      buytemplate="BuyCash"
      selltemplate="SellCash"
      descwidth="350">
      <list>component.PowerAr</list>
      <titlebar><![CDATA[
        @text = "Select Power Armor to Purchase from the List Below"
        ]]></titlebar>
      <headertitle><![CDATA[
        @text = "Power Armor"
        ]]></headertitle>
      <additem><![CDATA[
        @text = "Add New Power Armor"
        ]]></additem>
      </table_dynamic>
    </portal>

  <!-- arWpnThing template
        Derived from the SimpleItem template, this template includes the weapon
        damage and purchase cost. It is specifically for showing things for the
        user to select.

        It would be reasonable to assume that we could designate the range as a
        simple field-based label portal, but that won't work. If the weapon is a
        melee weapon, it won't have the range field, so you'll get run-time errors
        when Hero Lab tries to access the field associated with the portal. The
        solution is to use a script-based label that properly checks whether the
        weapon is ranged. If so, then the field can be safely accessed. If not,
        then the text is left as empty.
  -->
  <template
    id="arWpnThingSRA"
    name="Weapon Thing"
    compset="Weapon"
    marginhorz="3"
    marginvert="2">

    <portal
      id="name"
      style="lblLeft">
      <label
        field="name">
        </label>
      </portal>
	  
    <portal
      id="damage"
      style="lblNormal">
      <label>
        <labeltext><![CDATA[
		  var dmg as string
		  
          if (tagis[component.WeaponBaseSRA] = 0) then
            dmg = field[wpShowDmg].text
          else
            dmg = field[wpShowDmgAlt].text
            endif
			
		  @text = dmg
          ]]></labeltext>
        </label>
      </portal>

    <portal
      id="range"
      style="lblDisable">
      <label>
        <labeltext><![CDATA[
          if (tagis[component.WeapRange] <> 0) then
            @text = field[wpRange].text
          else
            @text = ""
            endif
          ]]></labeltext>
        </label>
      </portal>

    <portal
      id="cost"
      style="lblNormal">
      <label>
        <labeltext><![CDATA[
          @text = field[grCost].text
          ]]></labeltext>
        </label>
      </portal>

    <position><![CDATA[
      ~set up our dimensions, with a width that we dictate; our width can vary
      ~between weapon types, since ranged weapons require extra space for the range
      height = portal[name].height
      if (tagis[component.WeapRange] + tagis[component.WeapSpec] <> 0) then
        width = 375
      else
        width = 275
        endif

      ~if this is a "sizing" calculation, we're done
      doneif (issizing <> 0)

      ~if this is a show-only thing, hide the damage/range/cost, then position the name
      if (tagis[thing.showonly] <> 0) then
        portal[damage].visible = 0
        portal[range].visible = 0
        portal[cost].visible = 0
        portal[name].width = width
        perform portal[name].setstyle[lblNormal]
        done
        endif

      ~position the cost portal on the far right
      perform portal[cost].alignedge[right,0]

      ~position the damage portal to the left of the cost; we want the damage to
      ~be centered in its own column relative to a centerpoint position

      ~position the range portal to be centered in its own column relative to a
      ~centerpoint position
      perform portal[damage].centerpoint[horz,200]
      perform portal[range].centerpoint[horz,280]

      var rlimit as number
      var setrlimit as number
      rlimit = portal[cost].left - portal[range].left - 8
      setrlimit = minimum(portal[range].width,rlimit)
      portal[range].width = setrlimit
      perform portal[range].sizetofit[32]
      perform portal[range].centervert

      ~position the name on the left and let it use all available space
      portal[name].left = 0
      portal[name].width = minimum(portal[name].width,portal[damage].left - 10)
      perform portal[name].sizetofit[32]
      perform portal[name].centervert


      ]]></position>

    </template>

  <!-- arWpnPick template
        Derived from the SimpleItem template, this includes the weapon damage and
        the gear button to move equipment between various containers. We also show
        the range for ranged weapons. This template is specifically for showing the
        weapons that the user has already purchased.

        For more details, please see the "arWpnThing" template above.
  -->
  <template
    id="arWpnPickSRA"
    name="Weapon Pick"
    compset="WeaponSRA"
    marginhorz="3"
    marginvert="3">

    <portal
      id="namecheck"
      style="chkNormal"
      showinvalid="yes"
      tiptext="Click to equip this weapon. Unarmed Strike equips automatically.">
      <checkbox
        field="grIsEquip"
        dynamicfield="grStkName">
        </checkbox>
      </portal>

    <portal
      id="name"
      style="lblLeft"
      showinvalid="yes">
      <label>
        <labeltext><![CDATA[
          @text = field[grStkName].text
          ]]></labeltext>
        </label>
      </portal>

    <portal
      id="username"
      style="editNormal">
      <edit
        field="username">
        </edit>
      </portal>
	  
    <portal
      id="heldby"
      style="imgNormal">
      <image_literal
        image="gearinfo.bmp"
        isbuiltin="yes"
        istransparent="yes">
        </image_literal>
      <mouseinfo><![CDATA[
        call InfoHeld
        ]]></mouseinfo>
      </portal>

    <portal
      id="strreq"
      style="imgNormal">
      <image_literal
        image="strengthreq.bmp"
        isbuiltin="yes"
        istransparent="yes">
        </image_literal>
      <mouseinfo><![CDATA[
        @text = "You do not meet this weapon's minimum strength requirement."
        ]]></mouseinfo>
      </portal>

    <portal
      id="active"
      style="chkNormal"
      showinvalid="yes"
      tiptext="Click to activate this item">
      <checkbox
        field="wpActive"
        dynamicfield="wpActiveText">
        </checkbox>
      </portal>
	  
    <portal
      id="attack"
      style="lblNormal">
      <label
        field="wpNetAtk">
        </label>
      </portal>
	  
    <portal
      id="damage"
      style="lblNormal">
      <label>
        <labeltext><![CDATA[
		  var dmg as string
		  
          if (tagis[component.WeaponBaseSRA] = 0) then
            dmg = field[wpShowDmg].text
          else
            dmg = field[wpShowDmgAlt].text
            endif
			
		  @text = dmg
          ]]></labeltext>
        </label>
      </portal>

    <portal
      id="piercing"
      style="lblDisable">
      <label>
        <labeltext><![CDATA[
          if (field[wpPiercing].value > 0) then
            @text = "AP: " & field[wpPiercing].text
          else
            @text = ""
            endif
          ]]></labeltext>
        </label>
      </portal>

    <portal
      id="range"
      style="lblDisable">
      <label>
        <labeltext><![CDATA[
          if (tagis[component.WeapRange] <> 0) then
            @text = field[wpRange].text
          else
            @text = ""
            endif
          ]]></labeltext>
        </label>
      </portal>

    <portal
      id="rof"
      style="lblDisable">
      <label>
        <labeltext><![CDATA[
          if (tagis[component.WeapRange] <> 0) then
            @text = "RoF: " & field[wpFireRate].text
          else
            @text = ""
            endif
          ]]></labeltext>
        </label>
      </portal>

    <portal
      id="shots"
      style="lblDisable">
      <label>
        <labeltext><![CDATA[
          if (tagis[component.WeapRange] <> 0) then
            @text = "Shots: " & field[wpShots].text
          else
            @text = ""
            endif
          ]]></labeltext>
        </label>
      </portal>
	  
    <portal
      id="special"
      style="imgNormal">
      <image_literal
        image="special.bmp"
        isbuiltin="yes"
        istransparent="yes">
        </image_literal>
      <mouseinfo><![CDATA[
        @text = "Special: " & field[wpNotesAlt].text
        ]]></mouseinfo>
      </portal>
	  
    <portal
      id="gearmanage"
      style="actGear"
      tiptext="Click here to choose which container to place this equipment within.">
      <action
        action="gear">
        </action>
      </portal>

    <!-- RDS SFC Added the ability to edit for SFC Hand Weapons with available modfications -->
    <portal
      id="edit"
      style="actEdit"
      tiptext="Click here to edit the entry.">
      <action
        action="edit">
        </action>
      </portal>

    <portal
      id="info"
      style="actInfo">
      <action
        action="info">
        </action>
      <mouseinfo><![CDATA[
        var mouseinfo as string
        call MouseInfoSRA
        @text = mouseinfo
        ]]></mouseinfo>
      </portal>

    <portal
      id="delete"
      style="actDelete"
      tiptext="Click to delete this equipment">
      <action
        action="delete">
        </action>
      </portal>

    <position><![CDATA[
      ~center the portals vertically
      perform portal[info].centervert
      perform portal[name].centervert
      perform portal[username].centervert
      perform portal[namecheck].centervert
      perform portal[attack].centervert
      perform portal[damage].centervert
      perform portal[piercing].centervert
      perform portal[range].centervert
      perform portal[special].centervert
      perform portal[gearmanage].centervert
      perform portal[delete].centervert
      perform portal[edit].centervert
      perform portal[strreq].centervert
      perform portal[heldby].centervert
      perform portal[active].centervert
      perform portal[rof].centervert
      perform portal[shots].centervert
	  
	  var top1 as number
	  var top2 as number

      ~if this is a custom item, show our name edit control - otherwise just
      ~show a label
      portal[username].visible = tagis[Helper.CustomItem]
	  
      ~position the name on the left and let it use all available space
      portal[name].left = 0
	  portal[name].top = 0
      portal[name].width = 250
	  
	  top1 = portal[name].top
	  if (portal[username].visible = 0) then
	    portal[name].visible = 1
		endif

      ~position the name on the left and let it use all available space
      portal[username].left = 0
	  portal[username].top = 0
      portal[username].width = 250
	  
	  ~ top row - name, namecheck, strreq, attack, damage, piercing, range, special, 
	  ~           gearmanage, info, delete
	  
	  portal[info].top = top1
	  
	  top2 = portal[info].bottom + 5

	  portal[gearmanage].top = top1
	  portal[range].top = top2
	  portal[piercing].top = top2
	  portal[damage].top = top1
	  portal[attack].top = top1
	  portal[strreq].top = top2
	  portal[heldby].top = top2
	  portal[special].top = top1
	  portal[delete].top = top1
	  portal[edit].top = top2
	  portal[active].top = top2
	  portal[rof].top = top2
	  portal[shots].top = top2
	  portal[namecheck].top = top1
	  
	  ~position the delete portal on the far right
      perform portal[delete].alignedge[right,0]
	  
      ~position the info portal to the left of the delete button
      perform portal[info].alignrel[rtol,delete,-6]
	  
      ~determine if it's an Unarmed style attack and needs no checkbox
      if (tagis[Weapon.Unarmed] <> 0) then
        portal[namecheck].visible = 0
      else
        portal[name].visible = 0
        endif

      ~position the gear portal to the left of the info button
      perform portal[gearmanage].alignrel[rtol,info,-6]

      ~hide this to start with
      portal[edit].visible = 0
	  
      perform portal[edit].alignedge[left,0]
      ~portal[edit].right = portal[gearmanage].right
	  
	  ~perform portal[edit].alignrel[rtol,delete,-6]
	  
      ~ show the active portal on second row
	  perform portal[active].alignrel[ltor,edit,6]
      portal[active].visible = tagis[User.Activation]
	  
	  ~perform portal[rof].alignrel[ltor,active,5]
	  perform portal[rof].centerpoint[horz,250]

      ~position the range portal to the left of the delete button; we want the
      ~damage to be centered in its own column relative to a centerpoint position
      perform portal[shots].centerpoint[horz,300]
	  ~perform portal[shots].alignrel[ltor,rof,25]
	  
      ~position the special portal to the left of the gear button
      perform portal[special].alignrel[rtol,gearmanage,-6]

      if (hero.tagis[Hero.UseMods] <> 0) then
        if (tagis[ItemMod.ItemModHelper] <> 0) then
          portal[edit].visible = 1
          ~position the edit portal to the left of the gear button
          perform portal[edit].alignrel[rtol,delete,10]
          endif
        endif

      ~position the range portal to the left of the delete button; we want the
      ~damage to be centered in its own column relative to a centerpoint position
      perform portal[range].centerpoint[horz,375]

      ~position the AP portal to the left of the range column; we want the AP to
      ~be centered in its own column relative to a centerpoint position
      perform portal[piercing].centerpoint[horz,200]

      ~position the damage portal to the left of the AP column; we want the damage
      ~to be centered in its own column relative to a centerpoint position
      if (field[wpBonus].value > 0) then 
        portal[damage].width = 70
      elseif (field[wpPiercing].value > 0) then
        portal[damage].width = 70
        endif
		
      perform portal[damage].centerpoint[horz,340]
      perform portal[damage].sizetofit[25]
      ~perform portal[damage].centervert

      ~position the attack portal to the left of damage column; we want the
      ~attack to be centered in its own column relative to a centerpoint position
      perform portal[attack].centerpoint[horz,290]

      ~position the name on the left and let it use all available space
      var limit as number
      limit = portal[attack].left - 8
      portal[name].left = 0
	  portal[name].width = 250
	  ~ portal[name].width = minimum(portal[name].width,limit)
	  perform portal[name].sizetofit[15]
      ~perform portal[name].centervert
	  
      portal[namecheck].left = 0

      if (field[wpBonus].value = 0) then 
        portal[attack].visible = 0
        endif

      ~show the 'strength requirement' icon to the right of the name
      perform portal[strreq].alignrel[ltor,namecheck,2]
      portal[strreq].visible = tagis[Helper.BadStrReq]

      ~show the 'held by' icon to the right of the strenght requirement if appropriate
      if (portal[strreq].visible = 0) then
        portal[heldby].left = portal[strreq].left
      else
        perform portal[heldby].alignrel[ltor,strreq,5]
        endif
      portal[heldby].visible = isgearheld
	  
      ~center the name if this is a show-only thing
      if (tagis[thing.showonly] <> 0) then
        perform portal[name].centerhorz
        endif

      ~if this is not a ranged weapon, hide the range portal
      portal[range].visible = tagis[component.WeapRange]

      ~only show the special portal if there are special abilities/notes to view
      portal[special].visible = 1 - field[wpNotes].isempty
	  
	  ~ shrink the bottom of the portal if not needing to show edit or active
	  height = portal[edit].bottom + 5

      ]]></position>

    </template>

  <!-- arSRADefPick template
        Derived from the SimpleItem template, this includes the defense rating and
        the gear button to move equipment between various containers. This template
        is specifically for showing picks that the user has already purchased.
  -->
  <template
    id="arSRADefPick"
    name="Defense Pick"
    compset="DefenseSRA"
    marginhorz="3"
    marginvert="3">

    <portal
      id="name"
      style="chkNormal"
      showinvalid="yes"
      tiptext="Click to equip this item">
      <checkbox
        field="grIsEquip"
        dynamicfield="grStkName">
        </checkbox>
      </portal>

    <portal
      id="heldby"
      style="imgNormal">
      <image_literal
        image="gearinfo.bmp"
        isbuiltin="yes"
        istransparent="yes">
        </image_literal>
      <mouseinfo><![CDATA[
        call InfoHeld
        ]]></mouseinfo>
      </portal>

    <portal
      id="strreq"
      style="imgNormal">
      <image_literal
        image="strengthreq.bmp"
        isbuiltin="yes"
        istransparent="yes">
        </image_literal>
      <mouseinfo><![CDATA[
        @text = "You do not meet this equipment's minimum strength requirement."
        ]]></mouseinfo>
      </portal>

    <portal
      id="active"
      style="chkNormal"
      showinvalid="yes"
      tiptext="Click to equip this item">
      <checkbox
        field="defActive"
        dynamicfield="defActiveText">
        </checkbox>
      </portal>
	  
    <portal
      id="defense"
      style="lblNormal">
      <label
        field="defDefense">
        </label>
      </portal>

    <portal
      id="tough"
      style="lblNormal">
      <label
        field="defToughness">
        </label>
      </portal>
	  
    <portal
      id="special"
      style="imgNormal">
      <image_literal
        image="special.bmp"
        isbuiltin="yes"
        istransparent="yes">
        </image_literal>
      <mouseinfo><![CDATA[
        @text = "Special: " & field[defSpecDisp].text
        ]]></mouseinfo>
      </portal>
	  
    <portal
      id="gearmanage"
      style="actGear"
      tiptext="Click here to choose which container to place this equipment within.">
      <action
        action="gear">
        </action>
      </portal>

    <portal
      id="info"
      style="actInfo">
      <action
        action="info">
        </action>
      <mouseinfo><![CDATA[
        var mouseinfo as string
        call MouseInfoSRA
        @text = mouseinfo
        ]]></mouseinfo>
      </portal>

    <portal
      id="delete"
      style="actDelete"
      tiptext="Click to delete this equipment">
      <action
        action="delete">
        </action>
      </portal>

    <position><![CDATA[
      ~set up our height based on our tallest portal
      height = portal[info].height

      ~if this is a "sizing" calculation, we're done
      doneif (issizing <> 0)

      ~center the portals vertically
      perform portal[info].centervert
      perform portal[name].centervert
      perform portal[active].centervert
      perform portal[defense].centervert
      perform portal[special].centervert
      perform portal[tough].centervert
      perform portal[gearmanage].centervert
      perform portal[delete].centervert
      perform portal[strreq].centervert
      perform portal[heldby].centervert

      ~position the delete portal on the far right
      perform portal[delete].alignedge[right,0]

      ~position the info portal to the left of the delete button
      perform portal[info].alignrel[rtol,delete,-8]

      ~position the gear portal to the left of the info button
      perform portal[gearmanage].alignrel[rtol,info,-8]

      ~position the defense portal to the left of the delete button; we want the
      ~defense to be centered in its own column relative to a centerpoint position
      ~perform portal[defense].centerpoint[horz,250]

      ~position the defense portal to the left of the gearmanage button
      perform portal[special].alignrel[rtol,gearmanage,-15]
	  
      perform portal[tough].alignrel[rtol,special,-15]
	  
      perform portal[defense].alignrel[rtol,tough,-15]
	  
	  ~show the Active checkbox to the left of the defense
      perform portal[active].alignrel[rtol,defense,-10]
      portal[active].visible = tagis[User.Activation]
	  
      ~position the name on the left and let it use all available space
      var limit as number
      var setlimit as number
      limit = portal[defense].left - 8 - portal[heldby].width - 5 - portal[active].width - 2
      portal[name].left = 0
      setlimit = minimum(portal[name].width,limit)
      portal[name].width = setlimit
      perform portal[name].sizetofit[25]
      perform portal[name].centervert

      ~show the 'strength requirement' icon to the right of the name
      perform portal[strreq].alignrel[ltor,name,2]
      portal[strreq].visible = tagis[Helper.BadStrReq]

      ~show the 'held by' icon to the right of the strength requirement if appropriate
      if (portal[strreq].visible = 0) then
        portal[heldby].left = portal[strreq].left
      else
        perform portal[heldby].alignrel[ltor,strreq,5]
        endif
      portal[heldby].visible = isgearheld
	  
      ]]></position>

    </template>

	
  <!-- HGThingRIFTS template
        Derived from the SimpleItem template, this includes the purchase cost of
        the vehicle to be purchased.
  -->
  <template
    id="arPAThingSRA"
    name="Power Armor Thing"
    compset="PowerArmorSRA"
    marginhorz="3"
    marginvert="2">

    <portal
      id="name"
      style="lblNormal">
      <label field="name">
        </label>
      </portal>

    <portal
      id="cost"
      style="lblNormal">
      <label>
        <labeltext><![CDATA[
          @text = field[grCost].text
          ]]></labeltext>
        </label>
      </portal>

    <position><![CDATA[
      ~set up our dimensions, with a width that we dictate
      height = portal[name].height
      width = 250

      ~if this is a "sizing" calculation, we're done
      doneif (issizing <> 0)

      if (tagis[thing.showonly] <> 0) then
        portal[cost].visible = 0
        portal[name].width = width
        done
        endif

      ~position the cost portal on the far right
      perform portal[cost].alignedge[right,0]

      ~position the name on the left and let it use all available space
      portal[name].left = 0
      portal[name].width = minimum(portal[name].width,portal[cost].left - 10)
      ]]></position>

    </template>
	
  <!-- arPAPickSRA template
        Derived from the SimpleItem template, this includes the gear button to move
        equipment between various containers.
  -->
  <template
    id="arPAPickSRA"
    name="Power Armor Pick"
    compset="PowerArmorSRA"
    marginhorz="3"
    marginvert="3">

    <portal
      id="name"
      style="chkNormal"
      showinvalid="yes"
      tiptext="Click to pilot this vehicle">
      <checkbox
        field="grIsEquip"
        dynamicfield="grStkName">
        </checkbox>
      </portal>

    <portal
      id="container"
      style="imgNormal">
      <image_literal
        image="container.bmp"
        isbuiltin="yes"
        istransparent="yes">
        </image_literal>
      <mouseinfo><![CDATA[
        call InfoHolder
        ]]></mouseinfo>
      </portal>

    <portal
      id="info"
      style="actInfo">
      <action
        action="info">
        </action>
      <mouseinfo><![CDATA[
        var mouseinfo as string
        call MouseInfoSRA
        @text = mouseinfo
        ]]></mouseinfo>
      </portal>

    <portal
      id="edit"
      style="actEdit"
      tiptext="Click here to edit the entry.">
      <action
        action="edit">
        </action>
      </portal>

    <portal
      id="delete"
      style="actDelete"
      tiptext="Click to delete this vehicle">
      <action
        action="delete">
        </action>
      </portal>

    <position><![CDATA[
      ~set up our height based on our tallest portal
      height = portal[info].height

      ~if this is a "sizing" calculation, we're done
      doneif (issizing <> 0)

      ~center the portals vertically
      perform portal[info].centervert
      perform portal[name].centervert
      perform portal[delete].centervert
      perform portal[container].centervert
      perform portal[edit].centervert

      ~position the delete portal on the far right
      perform portal[delete].alignedge[right,0]

      ~position the info portal to the left of the delete button
      perform portal[info].alignrel[rtol,delete,-8]

      ~show the 'container' icon to the left of the edit button
      perform portal[container].alignrel[rtol,info,-8]
	  
      ~position the edit portal to the left of the container button
	  ~portal[edit].visible = 0
      perform portal[edit].alignrel[rtol,container,-8]
	  
      ~position the name on the left and position the user-fillable name field next to it
      var limit as number
      portal[name].left = 0

      ]]></position>

    </template>


  <!-- armory layout
        This layout orchestrates the display of the visual elements that comprise
        the Armory tab. This amounts to three pairs of title and table so the user
        can add melee weapons, ranged weapons, and armor/shields.

        The interesting facet of this layout is that it contains three separate
        tables that can vary in height, depending on what the user chooses to add
        to the character. These tables need to adapt their sizes to make efficient
        use of the available space. The "position" script accomplishes this goal.

        The exact steps being taken are clearly commented within the script, but
        the basic strategy is pretty simple. First the portals at the top are
        position, then the armor/shields table is positioned at the bottom with
        only two items visible. The remaining space is calculated and shared
        between the two weapon tables. Once the weapons have been given as much
        space as they need, the armor/shields table is enlarged to take up any
        additional space that is leftover.
  -->
  <layout
    id="armorySRA">
    <portalref portal="arMeleeSRA" taborder="10"/>
    <portalref portal="arRangedSRA" taborder="20"/>
    <portalref portal="arSpecialSRA" taborder="30"/>
    <portalref portal="arArmorSRA" taborder="40"/>
    <portalref portal="arPowerArmorSRA" taborder="10"/>

    <!-- This script sizes and positions the layout and its child visual elements. -->
    <position><![CDATA[
      autogap = 10

      ~set all tables to span the full width of the layout
      portal[arMeleeSRA].width = width
      portal[arRangedSRA].width = width
      portal[arArmorSRA].width = width
      portal[arSpecialSRA].width = width
      portal[arPowerArmorSRA].width = width

      perform portal[arMeleeSRA].batchadd
      perform portal[arRangedSRA].batchadd
      perform portal[arSpecialSRA].batchadd
      perform portal[arArmorSRA].batchadd
      perform portal[arPowerArmorSRA].batchadd

      perform this.batchplace
      ]]></position>

    </layout>


  <!-- armory panel
        This is the "Armory" panel shown within Hero Lab. Since we want this panel
        to appear first within the second grouping (equipment), we assign it an
        "order" of 210.

        The logic for this panel is similar to the logic for the preceeding panels,
        so please refer to those panels for more details.
  -->
  <panel
    id="armorySRA"
    name="Armory"
    marginhorz="5"
    marginvert="5"
    order="220">
    <live>source.srcRiftsTLPGAE</live>
    <layoutref layout="armorySRA"/>
    <position><![CDATA[
      ]]></position>
    </panel>
  </document>
